{
  "hash": "3bc1cf6a3c84e452c8223af1099f54f7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pivots and joins\"\nengine: python3\n---\n\n\n\n\n\n# VIDEO 1 BFFP data {greenscreen} ~ 9 min\n\nHello and welcome back to Data Literacy with Python!\n\nWe’re continuing our exciting journey into data wrangling—a cornerstone of data analysis and storytelling. If you’ve been with us through the previous modules, congratulations! You’ve covered a lot of ground and gained some serious data skills.\n\nLet’s quickly recap:\n\n- We explored subsetting data, learning how to select specific rows and columns with functions like `.select()`, `.drop()`, and the powerful suite of polars.selectors.\n- For observations, we used `.head()` and `.tail()` to view subsets and `.filter()` to fine-tune our subsetting of the data.\n- We mastered creating new columns using expressions wrapped in `.with_columns().`\n- And finally, we learned how to summarize data using `.group_by()` and `.agg()`, creating insightful summaries of our datasets.\n\nThese are all foundational skills, and you’re doing great!\n\nBut now, it’s time to level up. Today, we’re tackling data reshaping and joins, two powerful techniques for reorganizing and enriching your datasets. I also promised you some nice-looking tables, and I intend to deliver! We’ll be using the amazing `great_tables` library for our table designs. Let’s load up the libraries and dive right in.\n\n< PAUSE >\n\n\n\nToday’s dataset comes from the *Break from Plastics* environmental campaign — a sample of data with a powerful story. Here's the description of the data:\n\n< PAUSE >\n\n<!-- ::: {.callout-note collapse=true}\nIn 2020, thanks to our members and allies, Break Free From Plastic engaged 14,734 volunteers in 55 countries to conduct 575 brand audits. These volunteers collected 346,494 pieces of plastic waste, 63% of which was marked with a clear consumer brand. Despite the challenges of organizing during a global pandemic, our volunteers safely coordinated more brand audit events in more countries this year than in the previous two years. As a special activity during the pandemic, we also worked with over 300 waste pickers to highlight their roles as essential workers. Participants catalogued over 5,000 brands in this year’s global audit. Our analysis reveals the following as the 2020 Top 10 Global Polluters: The Coca-Cola Company; PepsiCo; Nestlé; Unilever; Mondelez International; Mars, Inc.; Procter & Gamble; Philip Morris International; Colgate-Palmolive; and Perfetti Van Melle. \n::: -->\n\nHave a look at the code that brings this data into our workspace:\n\n< PAUSE >\n\n\nIn your notebook you can see the code for importing the data, as well as a DataFrame containing a data dictionary — a detailed description of the variables in this dataset.\n\nSo far, we’ve always imported data from CSV files or pre-built datasets. But now, it's time to talk about creating data frames by hand. This is super handy when working with small examples, prototypes, or mock data. To do that, we need to talk about two foundational Python data structures: dictionaries and lists.\n\nThink of a dictionary as a way to describe an object. It’s a collection of \"key-value\" pairs—like writing down standard characteristics of something along with their values. Dictionaries are specified with curly brackets `{}`. Let’s say I want to describe my bike: \n\n\nHere, each characteristic—like Type or Size—has one value. Easy, right? But what if I also wanted to describe the bikes of my twins? I’d need three records, not one. \n\nThis is where lists come in. A list is a collection of items—typically of the same type—and it’s denoted with square brackets `[]`. Let’s use lists to describe all the bikes in my garage:\n\n\nNow, we have a dictionary of lists, representing three bikes. To turn this into a Polars DataFrame, all we need to do is pass it to the `pl.DataFrame()` function:\n\n\nAnd just like that, we’ve created a data frame by hand! This is a simple yet powerful way to structure and manipulate small datasets.\n\nOur `plastics_docs` specifies three characteristics: the variable names (`Variable`), their data types (`Class`), and their descriptions (`Description`).\n\nThis table essentially acts as documentation for the `plastics_df`. But let’s face it — raw data frames, while functional, don’t always look polished or presentation-ready. That’s where the Great Tables package comes in.\n\nGreat Tables is like a graphic design toolkit for your tables! It introduces a \"grammar of tables,\" similar to how `plotnine` provides a \"grammar of graphics.\" This makes it super easy to transform plain data frames into beautifully styled tables with minimal effort.\n\nThe core function in Great Tables is `GT()`, and it works similarly to how we use `ggplot` for creating plots. Let’s take a sneak peek at its capabilities by styling our `plastics_docs` data frame. Here’s how we do it:\n\n\nVoilà! `.opt_stylize()` method has some pre-built styles, which we used to convert a boring data frame into a polished and professional-looking table, ready to be shared or included in reports. Don’t worry about memorizing the details just yet — we’ll explore `GT()` more thoroughly in the upcoming sections.\n\nBefore we move on, let’s take a quick look at the data itself. Here’s a snippet of the first five rows of the `plastics_df`:\n\n\nAs you can see, the first few variables look familiar. They describe general metadata, like the region, country, and year. But let’s focus on the variables starting from `empty` and going down to `pvc`. These columns count the number of plastic pieces of different types collected during the cleanup. \n\nThe `grand_total` column sums up all these individual plastic counts. Finally, the last two columns—`num_events` and `volunteers`—capture operational details:\n\n- How many trash counting events took place in each country during a given year?\n- How many volunteers participated in these campaigns?\n\nThis dataset offers a wealth of insights into plastic pollution patterns across the globe. By organizing, reshaping, and visualizing this data, we’ll uncover powerful stories about the environmental challenges we face—and the steps we can take to address them.\n\nLet’s take a closer look at the data. Check out this very first row for Argentina. Notice the `parent_company` column contains the value: \"Grand Total.\" This suggests that this first row contains the totals for all Argentinian records in 2019.\n\nLet's look at the next year:\n\n\nHere’s something curious: for the year 2020, the rows with country totals aren’t marked with \"Grand Total.\" Instead, the `parent_company` field is left blank, or in technical terms, it’s marked as missing - `Null`. Hmm! What do we do with those?\n\n`Null` values aren’t just limited to `parent_company`. Let’s take a look at records collected in 2019 from unidentified locations.\n\n\nBefore we dive deeper into analyzing top contributors to plastic waste, let’s calculate the totals per country and year ourselves. Why? \n\nWell, the dataset has pre-computed totals marked with \"Grand Total\" or `Null` in the `parent_company`, but the logic seems inconsistent. Recomputing the totals ensures transparency and accuracy in our analysis.\n\nHere’s how we start:\n\n\nLet’s break this down:\n\n- `drop(\"grand_total\")`: The `grand_total` column is a pre-computed sum of all plastic types, which we can recalculate if needed.\n- Exclude \"Grand Total\" rows: We filter out rows where the `parent_company` column is populated with the phrase \"Grand Total.\"\n- Exclude `Null` values in `parent_company` column: These rows lack a meaningful company label and often represent aggregated data.\n\nBy cleaning the data in this way, we ensure that our analysis is based on individual contributions, not pre-summarized totals.\n\n# VIDEO 2 Aggregation {greenscreen} ~ 3 min\n\nNow, let’s talk about the two special columns in our dataset: `num_events` and `volunteers`. These capture the number of counting events and the number of volunteers who participated in the cleanup campaigns.\n\nBut here’s the catch. These columns don’t vary within groups of rows for the same year and country. Instead, they represent aggregate metrics that make sense at the country-year level, but are less meaningful at the company level.\n\nFor now, let’s set aside the rankings of companies responsible for the most plastic waste. Instead, we'll focus on the campaign itself — the Break from Plastics community engagement on a country level.\n\nIt’s time to roll up our sleeves and aggregate the data at the country-year level. First, let’s think about the groups we’re interested in. Our primary group identifiers would be `region`, `country_code `, `country`, and `year`. These columns define the unique groups for aggregation since each country belongs to one region and has a unique country code.\n\nNow, let’s decide what to aggregate. We are interested in aggregating the eight columns from `empty` to `pvc`. These need to be summed for each group. However, columns like `num_events` and `volunteers` shouldn’t be summed because their values remain constant within each group. Instead, we’ll take the first non-null value in each group.\n\nWith the powerful multi-column expressions in polars, we don’t need to write repetitive code for each plastic type. Using selectors, we can quickly choose and process groups of columns. I encourage you to try it out now.\n\n:::{.challenge}\nAggregate the plastic counts at the country-year level, ensuring that the `num_events` and `volunteers` columns remain intact. When you’re done, store the result into a new variable called `plastics_countries_df`.\n:::\n\nTake a moment to pause the video and give it a try.\n\n\n\nFantastic! Now that we have our cleaned and aggregated dataset, let’s talk about total plastic counts.\n\nTo calculate the total number of plastic items inspected, you’d typically list all relevant columns and sum them up: `total_count=pl.col(\"empty\")+pl.col(\"hdpe\")+pl.col(\"ldpe\")+` and so on. But imagine if you had hundreds of columns instead of eight! This approach would quickly become overwhelming.\n\nLuckily, there’s a clever trick to make this task more manageable: pivoting. By reorganizing the data into a different format, we can simplify calculations and enable more flexible analysis.\n\nIn the next section, we’ll dive into pivoting and explore how to reshape `plastics_countries_df` for deeper insights.\n\nLet’s keep going!\n\n# VIDEO 4 Wide and long data {greenscreen} ~ 9 min\n\nLet’s take a moment to reflect on two common ways of organizing the same data: wide and long formats.\n\nOn the left, we see a wide format dataframe. Here, each row represents a single observation, and the variables are spread across multiple columns.\n\nOn the right, we have the same data in a long format. In this version:\n\n- The first two columns, known as ID or index variables, are repeated for each observation.\n- A new column, `plastic_type`, gathers the names of the measured variables.\n- The final column, `quantity`, contains the values corresponding to those variables.\n\n:::::{.columns .column-screen-inset}\n:::{.column width=\"60%\"}\n\n<!-- #### \"Wide\" data -->\n\n\n:::\n:::{.column width=\"40%\"}\n\n<!-- #### \"Long\" data -->\n\n\n:::\n:::::\n\nThese two formats represent the exact same data, but the way they’re structured can have a big impact on how we work with them.\n\n- Wide Format:\n    - Easier for humans to read, especially in spreadsheets.\n    - Good for summarizing data at a glance.\n\n- Long Format:\n    - Preferred for computations, visualizations, and many data analysis tools.\n    - Simplifies aggregations and calculations.\n\nWhen working with data, being able to switch between these formats is essential. Many analysis tasks, like creating summaries or visualizations, become much easier when the data is in long format.\n\nThe process of transforming data from wide to long is called unpivoting or melting. This makes sense because the data seems to “melt” down into fewer columns while increasing the number of rows.\n\nWhen we unpivot data, we typically end up with three columns:\n\n- ID (or Index): These are the identifying variables that stay constant across the observations.\n- Key (or Variable Name): This gathers the names of the measured variables into a single column.\n- Value: This records the corresponding values for each of the variables.\n\nIn our case the *ID* variables are `region`, `country_code`, `country`, and `year`. We will name the *key* column `plastic_type`. The column containing *values* will be called `quantity`.\n\nOur first task is to unpivot the plastic count columns, transforming `plastics_countries_df` into a long format. This will simplify how we analyze and summarize the data.\n\nAs we’ve seen, the long-format data typically consists of three primary columns:\n\n- ID columns that uniquely identify each group or observation.\n- Key column that gathers variable names.\n- Value column that stores the corresponding values for each variable.\n\nLet’s begin by checking out the documentation for the `.unpivot()` method. This function gives us precise control over how to reshape the data.\n\n<!-- ![](img/unpivot_docs.png) -->\n\n`.unpivot()` takes four arguments:\n\n- `on`: Specifies the columns to be unpivoted.\n- `index`: Indicates which columns to keep as ID columns. You can use `polars.selectors` to specify these.\n- `variable_name`: Sets the name for the Key column.\n- `value_name`: Sets the name for the Value column.\n\nNote that the `on` argument is optional. If you don’t specify it, any column not listed as an `index` will be unpivoted automatically.\n\nHere’s how we can transform the dataset into a long format. We can select the index columns either by name or by position. We can also, optionally, specify the `on` argument to make it extra clear which columns should be melted.\n\n\nBoth approaches produce the same result:\n\n- The columns `region`, `country_code`, `country`, `year`, `num_events`, and `volunteers` are preserved as ID columns.\n- The plastic types (e.g., empty, hdpe, etc.) become the values in the `plastic_type` column.\n- The corresponding counts are stored in the `quantity` column.\n\nOnce the data is in long format, it becomes much easier to perform calculations. For instance, let’s group the data by `region`, `country_code`, `country`, `year`, `num_events`, and `volunteers`, and calculate the total quantity of plastic collected:\n\n\nAnd there we have it — a simple aggregation of total plastic quantities by country and year! This process highlights the power of unpivoting: it organizes our data in a way that makes calcultions across multiple columns more straightforward.\n\nWe now have 106 records of Break From Plastics campaign activity in every country in 2019 and 2020. We have total number of events every year, number of volunteers who participated every year and the quantity of plastics collected and sorted through.\n\nHow would you answer this question: What are the top 5 countries in terms of the growth in productivity, defined is the number of plastic processed per event? So we are not just interested in productivity every year, but also how it has grown from 2019 to 2020. I am looking at Taiwan, for example that engaged the mind-blowing 31 thousand volunteers and sorted through 120 thousand pieces of plastic in just 2 huge events held in 2019. Now that's an achievement! Especially if they managed to keep the level of engagement up the following year. \n\n\nWe can certainly calculate productivity per event as `quantity` divided by `num_events`, but how would you calculate the growth in productivity for every country? We need to pivot the productivity column across years and calculate the growth from the pivoted data. \n\n<!-- ![](img/pivot_docs.png) -->\n\nPivot method has these main arguments:\n- `on` specifies which column(s) should be pivoted\n- `index` optional selector for which columns will NOT be pivoted - i.e. those that will stay unchanged\n- `values` where should the values for the pivoted columns come from.  \n\nThe `index` column is optional. It can be inferred from the other arguments, meaning that everything which is not in `on` or `values` will be treated as an `index` set of columns.\n\nYou can pivot multiple columns at once. Just indicate several columns in the `values` argument and the pivoted table will have one column for combination of the factor in `on` and each or the `values` columns. So here in our example I have a categorical variable `year` with 2 levels (2019/2020). I am interested in seeing `productivity` split by year into `productivity_2019` and `productivity_2020` columns. But I can at the same time pivot `quantity`, so I also have `quantity_2019` and `quantity_2020`.\n\nBefore I do the pivot, I want to drop the `num_events` and `volunteers` since I am not doing anything with them (even though you could argue it makes sense to pivot them by year as well). But at this time, we are not interested in these columns so we can just drop them. The reason I do it, is so that I dont have to specify the `index` argument in the `pivot` function, relying on `polars` to figure it out for me. \n\n\n\n# VIDEO 5 great tables {greenscreen} ~ 6 min\n\nBefore we go any further, I want to quickly introduce you to the power of `great_tables` for producing engaing and informative tables. We will create a nice-looking table showing top-10 countries with the most impressive productivity growth. As we discussed earlier, the core function is `GT()` you also know that the default styling can be done with `.opt_stylize()` method. This is enough to produce decent looking table, but I want to show you a few more tricks.\n\nFirst of all, we have two groups of columns which are somehow related. A group of columns about *quantity* of plastic processed and a group of columns about *productivity*. We can introduce spanners - a grouping of columns in the table, where we can place a meaningful label. In `GT` this can accomplished with `.tab_spanner()`. As almost all methods in `great_tables()`, `.tab_spanner()` relies on `polars` selectors. So we can scoop all columns starting with `prod` under the Productivity spanner, and all columns starting with `quantity` under the other spanner.\n\nThe second group of functions in `great_tables` is related to columns. These methods will start with `.cols_` You can move and hide columns using `.cols_move()` and `.cols_hide()` without modifying the underlying data. Sometimes, it might be useful because the data is also used for something else, other than the table visualization and you don't want to shuffle the columns around just because you need to show them in the table in a particular order. In our case, we want to move the quantity group closer to the beginning of the table. There's also a convenient column labeler `.cols_label()`, which allows you to create arbitrary visual lables for columns without modifying the data. Again, in our table, because we introduced table spanners, we want some column names to be duplicates of each other, for example year numbers. But in `polars` all column names should be unique.\n\nFinally, the third block of functions I want to talk to you about is formatting. You can specify special formatting rules for one or more columns using `.fmt_` method. There are many pre-defined methods for formatting numbers, integers, percentages etc, including exoting column contents like flags and icons. The 3-letter country codes can serve as indentifiers for country flags and we will use this column format in our table. As with many other function in `GT` we are relying on polars.selectors to fetch the columns and then specify decimals, forced `+/-` sign, etc.\n\nWe will use the default styling in `.opt_stylize()` but later in this module we will have a look at custom styling function for creating more effective communication.\n\nAs with plots, it is good to annotate the table. You can add table header with title and subtitle, as well as the caption, called source note where you cite the souce of your data.\n\n\nYou may argue whether this table is informative, but it sure looks nice. And in the process of preparing it we have learned quite a lot about pivoting and great tables.\n\nI think it is your time to practice. Identifying the different types of plastic requires good knowledge of the different types of materials. Some materials were identified as belonging to predefined classes, while other samples were left unclassified (and ended up in the `o` (\"other\") or `empty` categories). Identification rate (measured in %) then is the proportion of total pieces of plastic that were assigned to predefined categories (and not in other or empty). We wonder if the increase in the engagement (number of volunteers signed up for BFFP events) leads to improvement of identification rate? \n\n:::{.challenge}\nPut together a table of top 10 countries where identification rate improved the most between 2019 and 2020. Insrease in the rate should be measured as simple difference between the two rates. Also, please calculate the percent increase/decrease in volunteer engagement for these countries. \n:::\n\nThere could be several ways to solve this task. In my table the top country is South Africa and the bottom country in Bangladesh. Pause a video and give this task a try! When you come back we will walk through a solution together and discuss the learning from the pivoting lesson.\n\n\nYou are done already? If not, then here are some tips. \n\n- You can create a boolean variable of whether a piece of plastic is identified or not. Include it into the list of grouping variables and calculate totals by it. Then pivot on this variable. This will allow you to calculate an identification rate.\n\n- Alternatively, you can calculate the identification rate using the `.over()` method as we did in the previous module and then just filter out the rows you dont need.\n\n- Pivot both `volunteers` and `id_rate` on `year`. Make sure you drop all other columns which are not part of your index valriables.\n\n- Its a good idea to filter out records containing null in either one of the growth metrics. This will eliminate countries which did not participate in BFFP campaigns one of the years.\n\nIf you find these tips helpful pause again and try solving the task. Otherwise, hang on, we will discuss the solution to this challenge together momentarily.\n\n\nWhew! You did it! Was it hard? Well, I am sure you have learned a lot and should be proud of yourself! One thing you can be sure of is that although this task is a little contrived and the data is a little dirty, the process of solving it not untypical for the daily job of a data analyst. The data analysis tasks in real life do not come nicely packaged and most of the data requires substantial amount of care before it can be usable.\n\nSo, let us talk through this solution together.\n\n- The first unpivoting should be quite straightforward. We list all ID columns in the `index` argument and provide new names for the key and value columns, just as we discussed earlier.\n- Then we create an \"plastic_unidentified\" variable in our data frame, which indicates whether a plastic waste is indentified by type or not. If the `plastic_type` takes \"empty\" or \"o\" value, our `plastic_unidentified` variable will contain the boolean value of `True`. You know how to write `pl.col(\"plastic_type\")==\"empty\" | pl.col(\"plastic_type\")==\"o\"` with explicit logical OR, but here I show you how to use `.is_in()` method with a list argument. Same result!\n- Then we group by everything *including* this new column and summarize. This should be familiar.\n- We dont need `num_events` column. Let's drop it so it does not interfere in our pivoting.\n- We are interested in calculating the proportion of identified plastic. At this moment you have two choices:\n    - Calculate the proportion using `.over` using expression `(pl.col(\"quantity\")/pl.col(\"quantity\").sum())` and then only keep the records where `plastic_unidentified` is False (using `~` for negation). The relevant lines would look something like this:\n\n\n\n    - Alternatively, we can pivot the `plastic_unidentified` and compute the proportion across the two new columns (named True and False). This option would look something like this:\n\n\n\n- Finally we need to pivot on year. Here we pivot both `volunteers` and newly created `id_rate` because our task was to show change in both. As we discussed earlier, this will create total of 4 columns because there are 2 levels in `year` column and we are pivoting 2 variables.\n- Our last step is to calculate the volunteer growth and the identification rate increase. One is percent growth and the other is a simple difference in percent values. Drop the records where either one of them is Null and sort by `id_rate_increase`. Then take top 10 records only.\n\n\n# JOINS 6-12 (NOTREADY YET) ~ 30 min\n\n::: {#7aedad2c .cell execution_count=23}\n``` {.python .cell-code}\nband_members = pl.DataFrame({\n    \"name\": [\"Mick\", \"John\", \"Paul\"],\n    \"band\": [\"Stones\", \"Beatles\", \"Beatles\"] \n    })\n\nband_instruments = pl.DataFrame({\n    \"name\": [\"John\", \"Paul\", \"Keith\", \"Ringo\"],\n    \"plays\": [\"guitar\", \"bass\", \"guitar\", \"drums\"]\n    })\n```\n:::\n\n\nLeft join\n\n::: {#161c53b0 .cell execution_count=24}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"left\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th><th>plays</th></tr><tr><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Mick&quot;</td><td>&quot;Stones&quot;</td><td>null</td></tr><tr><td>&quot;John&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;bass&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nFull join\n\n::: {#77fc5645 .cell execution_count=25}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"full\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th><th>name_right</th><th>plays</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;John&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;John&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;Paul&quot;</td><td>&quot;bass&quot;</td></tr><tr><td>null</td><td>null</td><td>&quot;Keith&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>null</td><td>null</td><td>&quot;Ringo&quot;</td><td>&quot;drums&quot;</td></tr><tr><td>&quot;Mick&quot;</td><td>&quot;Stones&quot;</td><td>null</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#a7c44e35 .cell execution_count=26}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"full\", coalesce=True))\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th><th>plays</th></tr><tr><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;John&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;bass&quot;</td></tr><tr><td>&quot;Keith&quot;</td><td>null</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Ringo&quot;</td><td>null</td><td>&quot;drums&quot;</td></tr><tr><td>&quot;Mick&quot;</td><td>&quot;Stones&quot;</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nInner join (Default)\n\n::: {#36cec868 .cell execution_count=27}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"inner\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th><th>plays</th></tr><tr><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;John&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;bass&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAnti join\n\n::: {#fd2efbb2 .cell execution_count=28}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"anti\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Mick&quot;</td><td>&quot;Stones&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAnd reverse. Note the swapped order of datasets.\n\n::: {#fa57fabf .cell execution_count=29}\n``` {.python .cell-code}\n(band_instruments\n.join(band_members, on=\"name\", how=\"anti\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>plays</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Keith&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Ringo&quot;</td><td>&quot;drums&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nMost commonly used join is `left`. If you dont know which join you need, you need \"left\" join. Pay attention which dataset is on your left.\n\nFor the curious right join allows you to perform left join in the opposite direction (without swapping the datasets). You should do \"right join\" only as the last resort, when you can not change the dataset order.\n\nFull join introduces missing value, inner join drops records, left join does both, but thats what you probably want. Anti-join is useful for checking which records will get dropped if you perform an inner join. Do it in both directions!\n\nThere's something that's called \"semi-join\" but it is more like a filter. It will return the left dataset WITHOUT any additional information, filtered to only those records you have on the right.\n\n::: {#f7e05163 .cell execution_count=30}\n``` {.python .cell-code}\n(band_instruments\n.join(band_members, on=\"name\", how=\"semi\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>plays</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;John&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;bass&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nLet's look at the data.\n\n::: {#983483ba .cell execution_count=31}\n``` {.python .cell-code}\nfact_area_df = pl.read_csv(\"cia/factbook_area_2024.csv\", null_values=\"NA\")\nfact_comm_df = pl.read_csv(\"cia/factbook_comm_transport_2024.csv\", null_values=\"NA\")\nfact_econ_df = pl.read_csv(\"cia/factbook_economy_security_2024.csv\", null_values=\"NA\")\nfact_energy_df = pl.read_csv(\"cia/factbook_energy_environment_2024.csv\", null_values=\"NA\")\nfact_ppl_df = pl.read_csv(\"cia/factbook_people_society_2024.csv\", null_values=\"NA\")\n```\n:::\n\n\n::: {#1421a854 .cell execution_count=32}\n``` {.python .cell-code}\nprint(\"People dataset dimensions:\", fact_ppl_df.shape[0])\nprint(\"Energy dataset dimensions:\", fact_energy_df.shape[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPeople dataset dimensions: 237\nEnergy dataset dimensions: 226\n```\n:::\n:::\n\n\nHow many records will be returned if we perform left join on this? Correct answer is 237. Creates missing values.\n\n::: {#180ac468 .cell execution_count=33}\n``` {.python .cell-code}\n(\nfact_ppl_df\n    .join(fact_energy_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (237, 23)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>slug</th><th>region</th><th>alcohol_consumption_per_capita</th><th>birth_rate</th><th>children_under_the_age_of_5_years_underweight</th><th>death_rate</th><th>education_expenditures</th><th>infant_mortality_rate</th><th>life_expectancy_at_birth</th><th>maternal_mortality_ratio</th><th>median_age</th><th>net_migration_rate</th><th>obesity_adult_prevalence_rate</th><th>population_total</th><th>population_growth_rate</th><th>tobacco_use</th><th>total_fertility_rate</th><th>carbon_dioxide_emissions</th><th>electricity_installed_generating_capacity</th><th>energy_consumption_per_capita</th><th>revenue_from_coal</th><th>revenue_from_forest_resources</th></tr><tr><td>str</td><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Cook Islands&quot;</td><td>&quot;cook-islands&quot;</td><td>&quot;Australia and Oceania&quot;</td><td>12.97</td><td>12.1</td><td>null</td><td>9.4</td><td>4.6</td><td>15.1</td><td>77.6</td><td>null</td><td>41.1</td><td>-25.1</td><td>55.9</td><td>7761</td><td>-2.24</td><td>24.0</td><td>2.02</td><td>87000</td><td>17000</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Latvia&quot;</td><td>&quot;latvia&quot;</td><td>&quot;Europe&quot;</td><td>12.9</td><td>8.3</td><td>21.1</td><td>14.7</td><td>6.0</td><td>4.7</td><td>76.4</td><td>18</td><td>45.5</td><td>-4.9</td><td>23.6</td><td>1801246</td><td>-1.14</td><td>37.0</td><td>1.55</td><td>6458000</td><td>3233000</td><td>64272000</td><td>0.0</td><td>0.85</td></tr><tr><td>&quot;Czechia&quot;</td><td>&quot;czechia&quot;</td><td>&quot;Europe&quot;</td><td>12.73</td><td>9.8</td><td>null</td><td>12.0</td><td>5.1</td><td>2.6</td><td>78.6</td><td>3</td><td>44.2</td><td>2.7</td><td>26.0</td><td>10837890</td><td>0.04</td><td>30.7</td><td>1.73</td><td>91213000</td><td>21914000</td><td>149874000</td><td>0.14</td><td>0.17</td></tr><tr><td>&quot;Lithuania&quot;</td><td>&quot;lithuania&quot;</td><td>&quot;Europe&quot;</td><td>11.93</td><td>8.9</td><td>2.5</td><td>15.2</td><td>4.0</td><td>3.6</td><td>76.1</td><td>9</td><td>45.1</td><td>-4.1</td><td>26.3</td><td>2628186</td><td>-1.05</td><td>32.0</td><td>1.62</td><td>12803000</td><td>4258000</td><td>85201000</td><td>0.0</td><td>0.31</td></tr><tr><td>&quot;Austria&quot;</td><td>&quot;austria&quot;</td><td>&quot;Europe&quot;</td><td>11.9</td><td>9.3</td><td>null</td><td>9.9</td><td>5.1</td><td>3.2</td><td>82.7</td><td>5</td><td>44.9</td><td>3.5</td><td>20.1</td><td>8967982</td><td>0.3</td><td>26.4</td><td>1.52</td><td>57876000</td><td>29810000</td><td>123110000</td><td>0.0</td><td>0.07</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Tokelau&quot;</td><td>&quot;tokelau&quot;</td><td>&quot;Australia and Oceania&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>-3.84</td><td>null</td><td>1647</td><td>-0.01</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Svalbard&quot;</td><td>&quot;svalbard&quot;</td><td>&quot;Europe&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>-5.57</td><td>null</td><td>2926</td><td>-0.03</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Norfolk Island&quot;</td><td>&quot;norfolk-island&quot;</td><td>&quot;Australia and Oceania&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1748</td><td>0.01</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Holy See (Vatican City)&quot;</td><td>&quot;holy-see-vatican-city&quot;</td><td>&quot;Europe&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1000</td><td>0.0</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Pitcairn Islands&quot;</td><td>&quot;pitcairn-islands&quot;</td><td>&quot;Australia and Oceania&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>50</td><td>0.0</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThe inner join drops \"unmatched\" observations from both sides\n\n::: {#1e993771 .cell execution_count=34}\n``` {.python .cell-code}\n(\n    fact_ppl_df\n    .join(fact_energy_df, on=[\"name\", \"slug\", \"region\"], how=\"inner\")\n    .shape\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n(223, 23)\n```\n:::\n:::\n\n\nFull join will keep unmatched observations on both sides.\n\n::: {#a9c99291 .cell execution_count=35}\n``` {.python .cell-code}\n(\n    fact_ppl_df\n    .join(fact_energy_df, on=[\"name\", \"slug\", \"region\"], how=\"full\", coalesce=True)\n    .shape\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n(240, 23)\n```\n:::\n:::\n\n\nJoin all of these datasets.\n\n::: {#dd1fb6b1 .cell execution_count=36}\n``` {.python .cell-code}\nfact_all_df = (\n    fact_area_df\n    .join(fact_econ_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n    .join(fact_energy_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n    .join(fact_comm_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n    .join(fact_ppl_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n)\n```\n:::\n\n\n::: {#49ba846b .cell execution_count=37}\n``` {.python .cell-code}\n(\n    ggplot(fact_all_df)+\n    geom_point(mapping=aes(x=\"gdp_composition_by_sector_of_origin_services\", y=\"energy_consumption_per_capita\", color=\"region\", size=\"population_total\"))+\n    scale_y_log10()+\n    scale_size_continuous()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/dm0737pe/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/layer.py:364: PlotnineWarning: geom_point : Removed 64 rows containing missing values.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](pivotjoin_files/figure-html/cell-38-output-2.png){width=672 height=480}\n:::\n:::\n\n\n::: {#ab33d19a .cell execution_count=38}\n``` {.python .cell-code}\n(\n    ggplot(fact_all_df)+\n    geom_point(mapping=aes(x=\"military_expenditures\", y=\"total_fertility_rate\", color=\"region\", size=\"population_total\"))+\n    scale_y_log10()\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/dm0737pe/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/layer.py:364: PlotnineWarning: geom_point : Removed 90 rows containing missing values.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](pivotjoin_files/figure-html/cell-39-output-2.png){width=672 height=480}\n:::\n:::\n\n\n## Stacking\n\n::: {#9456596b .cell execution_count=39}\n``` {.python .cell-code}\n# indoor air pollution\nhhap_deaths = pl.read_csv(\"hhap/hhap_deaths.csv\")\nclean_fuels = pl.read_csv(\"hhap/clean_fuels_cooking.csv\")\nfuel_types = pl.read_csv(\"hhap/cooking_by_fuel_type.csv\")\n```\n:::\n\n\nAnother common type of operation is stacking two identical datasets together (vertically). This is possible to do when the meaning of the columns in the datasets is the same and we are interested in combining two parts of identical data into a new and larger dataset.\n\nRecall that in our household air pollution case study we had three files: \n- `hhap_deaths` - containing death cases, associated with air pollution\n- `fuel_types` - describing information about the fuels used by population in different countries for household needs \n- `clean_fuels` - containing the fraction of population in each country with access to clean fulels for cooking\n\nAll three of these datasets contain three identical columns describing the country of observation: `region`, `country_code` and `country`. The countries listed in each of the datasets is largely similar, but not completely overlapping. Let's see if we can compile a single master set of all countries with the codes and the regions they belong to. Because the data is recorded over many years each of the datasets contains many duplicates entries. This problem will be even larger when we stack the data from several datasets together, so we will need to ensure the records in our final (combined) dataset are unique.\n\n::: {#b00ec95b .cell execution_count=40}\n``` {.python .cell-code}\nidcols=cs.by_name(\"region\", \"country_code\", \"country\")\ncountry_regions = (hhap_deaths.select(idcols)\n    .vstack(fuel_types.select(idcols))\n    .vstack(clean_fuels.select(idcols))\n    .unique()\n)\n```\n:::\n\n\nNote, that here we created a temporary object idcols, which will store only selector object for the three columns we are interested in. Polar selectors are independent entities which can live both inside the querying contexts as well as in the global environment, i.e. in memory accessible\n\nLets compare our country codes with the full list of codes issued by ISO. Here's a file with all Alpha 2 and Alpha 3 codes issued to nation states and territories.\n\n::: {#0e6e043c .cell execution_count=41}\n``` {.python .cell-code}\niso_df = pl.read_csv(\"hhap/CountryCodes_Alpha2_Alpha3.csv\")\n\n(country_regions\n    .join(iso_df, left_on=\"country_code\", right_on=\"alpha3\", how=\"anti\"))\n\n(country_regions\n    .join(iso_df, left_on=\"country_code\", right_on=\"alpha3\", how=\"left\"))\n\n# How many countries are not present in the combined household air pollution dataset? \n# What proportion of those countries have the world \"Island\" in their name?\n\ntmp_df1 = (iso_df\n    .join(country_regions, left_on=\"alpha3\", right_on=\"country_code\", how=\"anti\"))\n\n(iso_df\n    .join(country_regions, left_on=\"alpha3\", right_on=\"country_code\", how=\"anti\")\n    .select(pl.col(\"country\").str.contains(\"Island\").mean())\n    )\n\n(iso_df\n    .join(country_regions, left_on=\"alpha3\", right_on=\"country_code\", how=\"anti\")\n    .group_by(pl.col(\"country\").str.contains(\"Island\").alias(\"island\"))\n    .len()\n    .with_columns(pl.col(\"len\")/pl.sum(\"len\"))\n    .filter(\"island\")\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th><th>len</th></tr><tr><td>bool</td><td>f64</td></tr></thead><tbody><tr><td>true</td><td>0.259259</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nHorizontal stacking is possible, but you probably want to do a join instead, because horizontal stacking assumes that row order is the same and observations are identical. This is better ensured with unique IDs which could be used for join.\n\n",
    "supporting": [
      "pivotjoin_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}