{
  "hash": "0e1dfa85177130d2ba8d2a99aa556fe2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pivots and joins\"\nengine: python3\n---\n\n::: {#setup .cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\nimport polars.selectors as cs\nfrom plotnine import *\nfrom gapminder import gapminder\nfrom great_tables import GT\ntheme_set(theme_linedraw())\n```\n:::\n\n\n## Pivot\n\nEarlier we mentioned that data frame consists of observations organized in rows and variable organized in columns. But not all data comes as well-organized as wel would want it to be. Today we are going to look at the sample of the data collected by the Break from Plastics environmental campaign. Here's the description of the data:\n\n> In 2020, thanks to our members and allies, Break Free From Plastic engaged 14,734 volunteers in 55 countries to conduct 575 brand audits. These volunteers collected 346,494 pieces of plastic waste, 63% of which was marked with a clear consumer brand. Despite the challenges of organizing during a global pandemic, our volunteers safely coordinated more brand audit events in more countries this year than in the previous two years. As a special activity during the pandemic, we also worked with over 300 waste pickers to highlight their roles as essential workers. Participants catalogued over 5,000 brands in this year’s global audit. Our analysis reveals the following as the 2020 Top 10 Global Polluters: The Coca-Cola Company; PepsiCo; Nestlé; Unilever; Mondelez International; Mars, Inc.; Procter & Gamble; Philip Morris International; Colgate-Palmolive; and Perfetti Van Melle. \n\nWe are going to investigate this dataset and summarize it using Great Tables. Great Tables is a python package which implements \"grammar of tables\", so in many respects it is similar in spirit to plotnine, in a sense that it attempts to develop a consistent API around production of tables making it very easy to produce nice looking summaries form data in table form. The main function in Great Tables is `GT()`. It takes data argument and many other useful options. We can use .pipe to pass the data into it.\n\n\nIn the code example provided to you in the notebook you can see the code for importing the data, as well as the dataframe containing the data dictionary for this dataset. The data frame is specified via a dictionary denoted with curly braces `{}`. Dictionaries are widely used in Python for passing \"key-value\" pairs. \n\n::: {#6e0274da .cell execution_count=2}\n``` {.python .cell-code}\nplastics_df = pl.read_csv(\"bffp/BFFplastics.csv\")\n\nplastics_docs = pl.DataFrame({\n    \"Variable\": [\"region\", \"country_code\" , \"country\", \"year\", \"parent_company\", \"empty\", \"hdpe\", \"ldpe\", \"o\", \"pet\", \"pp\", \"ps\", \"pvc\", \"grand_total\", \"num_events\", \"volunteers\"],\n    \"Class\": [\"character\",\"character\",\"character\", \"double\", \"character\", \"double\", \"double\", \"double\", \"double\", \"double\", \"double\", \"double\", \"double\", \"double\", \"double\", \"double\"],\n    \"Description\": [\"Region\", \"Alpha 3 ISO 3166 code\",\"Country of cleanup\", \"Year (2019 or 2020)\", \"Source of plastic\", \"Category left empty count\", \"High density polyethylene count (Plastic milk containers, plastic bags, bottle caps, trash cans, oil cans, plastic lumber, toolboxes, supplement containers)\", \"Low density polyethylene count (Plastic bags, Ziploc bags, buckets, squeeze bottles, plastic tubes, chopping boards)\", \"Category marked other count\", \"Polyester plastic count (Polyester fibers, soft drink bottles, food containers (also see plastic bottles)\", \"Polypropylene count (Flower pots, bumpers, car interior trim, industrial fibers, carry-out beverage cups, microwavable food containers, DVD keep cases)\", \"Polystyrene count (Toys, video cassettes, ashtrays, trunks, beverage/food coolers, beer cups, wine and champagne cups, carry-out food containers, Styrofoam)\", \"PVC plastic count (Window frames, bottles for chemicals, flooring, plumbing pipes)\", \"Grand total count (all types of plastic)\", \"Number of counting events\", \"Number of volunteers\"]\n})\n\n(plastics_docs\n    .pipe(GT)\n)\n\n(plastics_df.describe())\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (9, 17)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>region</th><th>country_code</th><th>country</th><th>year</th><th>parent_company</th><th>empty</th><th>hdpe</th><th>ldpe</th><th>o</th><th>pet</th><th>pp</th><th>ps</th><th>pvc</th><th>grand_total</th><th>num_events</th><th>volunteers</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td><td>f64</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>&quot;12034&quot;</td><td>&quot;12034&quot;</td><td>&quot;12034&quot;</td><td>13380.0</td><td>&quot;13330&quot;</td><td>10137.0</td><td>11734.0</td><td>11303.0</td><td>13113.0</td><td>13166.0</td><td>11884.0</td><td>11408.0</td><td>9052.0</td><td>13366.0</td><td>13380.0</td><td>13273.0</td></tr><tr><td>&quot;null_count&quot;</td><td>&quot;1346&quot;</td><td>&quot;1346&quot;</td><td>&quot;1346&quot;</td><td>0.0</td><td>&quot;50&quot;</td><td>3243.0</td><td>1646.0</td><td>2077.0</td><td>267.0</td><td>214.0</td><td>1496.0</td><td>1972.0</td><td>4328.0</td><td>14.0</td><td>0.0</td><td>107.0</td></tr><tr><td>&quot;mean&quot;</td><td>null</td><td>null</td><td>null</td><td>2019.305232</td><td>null</td><td>0.411759</td><td>3.04602</td><td>10.319384</td><td>49.61359</td><td>20.940301</td><td>8.220801</td><td>1.862114</td><td>0.350088</td><td>90.15083</td><td>33.369806</td><td>1117.645295</td></tr><tr><td>&quot;std&quot;</td><td>null</td><td>null</td><td>null</td><td>0.460523</td><td>null</td><td>22.586066</td><td>66.123044</td><td>194.644067</td><td>1601.989534</td><td>428.157766</td><td>141.805081</td><td>39.737064</td><td>7.894296</td><td>1873.68134</td><td>44.708642</td><td>1812.402748</td></tr><tr><td>&quot;min&quot;</td><td>&quot;Africa&quot;</td><td>&quot;ARE&quot;</td><td>&quot;Argentina&quot;</td><td>2019.0</td><td>&quot;&quot;ESE&quot;&quot;</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>1.0</td><td>1.0</td></tr><tr><td>&quot;25%&quot;</td><td>null</td><td>null</td><td>null</td><td>2019.0</td><td>null</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>1.0</td><td>4.0</td><td>114.0</td></tr><tr><td>&quot;50%&quot;</td><td>null</td><td>null</td><td>null</td><td>2019.0</td><td>null</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>1.0</td><td>15.0</td><td>400.0</td></tr><tr><td>&quot;75%&quot;</td><td>null</td><td>null</td><td>null</td><td>2020.0</td><td>null</td><td>0.0</td><td>0.0</td><td>0.0</td><td>2.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>6.0</td><td>42.0</td><td>1416.0</td></tr><tr><td>&quot;max&quot;</td><td>&quot;Western Pacific&quot;</td><td>&quot;ZAF&quot;</td><td>&quot;Viet Nam&quot;</td><td>2020.0</td><td>&quot;脆司令/Cui Siling&quot;</td><td>2208.0</td><td>3728.0</td><td>11700.0</td><td>120646.0</td><td>36226.0</td><td>6046.0</td><td>2101.0</td><td>622.0</td><td>120646.0</td><td>145.0</td><td>31318.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThere are many missing values in this data. The year column covers 2019 and 2020. The different plastics types exibit different degrees of missingness. \n\nFirst have a look at the data\n\n::: {#3a354a32 .cell execution_count=3}\n``` {.python .cell-code}\nplastics_df\n\nplastics_df.filter(pl.col(\"country\").is_null())\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1_346, 16)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>region</th><th>country_code</th><th>country</th><th>year</th><th>parent_company</th><th>empty</th><th>hdpe</th><th>ldpe</th><th>o</th><th>pet</th><th>pp</th><th>ps</th><th>pvc</th><th>grand_total</th><th>num_events</th><th>volunteers</th></tr><tr><td>str</td><td>str</td><td>str</td><td>i64</td><td>str</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;Grand Total&quot;</td><td>null</td><td>1535</td><td>6443</td><td>30181</td><td>11087</td><td>5420</td><td>2101</td><td>188</td><td>56955</td><td>145</td><td>1416</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;Unbranded&quot;</td><td>null</td><td>631</td><td>3176</td><td>17432</td><td>4265</td><td>2417</td><td>1545</td><td>20</td><td>29486</td><td>145</td><td>1416</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;The Coca-Cola Company&quot;</td><td>null</td><td>130</td><td>4</td><td>157</td><td>1154</td><td>210</td><td>1</td><td>51</td><td>1707</td><td>145</td><td>1416</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;Philip Morris&quot;</td><td>null</td><td>13</td><td>37</td><td>1579</td><td>1</td><td>0</td><td>4</td><td>0</td><td>1634</td><td>145</td><td>1416</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;Sahakari Jal&quot;</td><td>null</td><td>0</td><td>0</td><td>0</td><td>563</td><td>975</td><td>0</td><td>0</td><td>1538</td><td>145</td><td>1416</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;Schulte&quot;</td><td>null</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>145</td><td>1416</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;Schwartau&quot;</td><td>null</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>145</td><td>1416</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;SchÃ¶fferhofer&quot;</td><td>null</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>145</td><td>1416</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;Scotts Black Mulch&quot;</td><td>null</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>145</td><td>1416</td></tr><tr><td>null</td><td>null</td><td>null</td><td>2019</td><td>&quot;Cherry Valley marketplace&quot;</td><td>null</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>145</td><td>1416</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nLook at the very first row. The `parent_company` is Grand Total. It seems like this line contains the totals for Argentinian records for 2019.\n\nHowever, for year 2020, the rows with totals per country are not marked with \"Grand Total\", but rather are populated with the missing value \n\n::: {#28e71e42 .cell execution_count=4}\n``` {.python .cell-code}\n(plastics_df\n    .filter(pl.col(\"year\")==2020))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (4_084, 16)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>region</th><th>country_code</th><th>country</th><th>year</th><th>parent_company</th><th>empty</th><th>hdpe</th><th>ldpe</th><th>o</th><th>pet</th><th>pp</th><th>ps</th><th>pvc</th><th>grand_total</th><th>num_events</th><th>volunteers</th></tr><tr><td>str</td><td>str</td><td>str</td><td>i64</td><td>str</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Americas&quot;</td><td>&quot;ARG&quot;</td><td>&quot;Argentina&quot;</td><td>2020</td><td>null</td><td>0</td><td>12</td><td>9</td><td>70</td><td>9</td><td>7</td><td>2</td><td>0</td><td>109</td><td>24</td><td>9</td></tr><tr><td>&quot;Americas&quot;</td><td>&quot;ARG&quot;</td><td>&quot;Argentina&quot;</td><td>2020</td><td>&quot;Aceitera Martinez S.A&quot;</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>24</td><td>9</td></tr><tr><td>&quot;Americas&quot;</td><td>&quot;ARG&quot;</td><td>&quot;Argentina&quot;</td><td>2020</td><td>&quot;AGD&quot;</td><td>0</td><td>0</td><td>0</td><td>3</td><td>1</td><td>0</td><td>0</td><td>0</td><td>4</td><td>24</td><td>9</td></tr><tr><td>&quot;Americas&quot;</td><td>&quot;ARG&quot;</td><td>&quot;Argentina&quot;</td><td>2020</td><td>&quot;Alfredo Willliner S.A&quot;</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>2</td><td>0</td><td>2</td><td>24</td><td>9</td></tr><tr><td>&quot;Americas&quot;</td><td>&quot;ARG&quot;</td><td>&quot;Argentina&quot;</td><td>2020</td><td>&quot;Alicorp Argentina&quot;</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>24</td><td>9</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Western Pacific&quot;</td><td>&quot;VNM&quot;</td><td>&quot;Viet Nam&quot;</td><td>2020</td><td>&quot;Vinamilk&quot;</td><td>0</td><td>0</td><td>0</td><td>91</td><td>1</td><td>0</td><td>0</td><td>0</td><td>92</td><td>6</td><td>27</td></tr><tr><td>&quot;Western Pacific&quot;</td><td>&quot;VNM&quot;</td><td>&quot;Viet Nam&quot;</td><td>2020</td><td>&quot;VINH HAO CO.&quot;</td><td>0</td><td>0</td><td>0</td><td>0</td><td>4</td><td>0</td><td>0</td><td>0</td><td>4</td><td>6</td><td>27</td></tr><tr><td>&quot;Western Pacific&quot;</td><td>&quot;VNM&quot;</td><td>&quot;Viet Nam&quot;</td><td>2020</td><td>&quot;Vital&quot;</td><td>0</td><td>0</td><td>0</td><td>0</td><td>4</td><td>0</td><td>0</td><td>0</td><td>4</td><td>6</td><td>27</td></tr><tr><td>&quot;Western Pacific&quot;</td><td>&quot;VNM&quot;</td><td>&quot;Viet Nam&quot;</td><td>2020</td><td>&quot;VM Group&quot;</td><td>0</td><td>2</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>2</td><td>6</td><td>27</td></tr><tr><td>&quot;Western Pacific&quot;</td><td>&quot;VNM&quot;</td><td>&quot;Viet Nam&quot;</td><td>2020</td><td>&quot;Yakult&quot;</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>2</td><td>0</td><td>0</td><td>2</td><td>6</td><td>27</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nBefore we dive deeper into analyzing top contributors to plastic waste, lets look at the totals per country. We now have two options. We could populate the rows containing the totals with the phrase \"Grand Total\" and then use it to filter. This assumes that totals are calculated properly for all countries. We will basically disregard the majority of the dataset and rely on few rows that have been pre-computed for us.\n\nAn alternative strategy could be to drop all rows with invalid company name (marked with either \"Grand Total\" or left missing \"null\") and recompute totals by hand for each of the count columns.\n\n::: {#0387a5d4 .cell execution_count=5}\n``` {.python .cell-code}\nplastics_totals = (plastics_df\n    .drop(\"grand_total\", \"num_events\", \"volunteers\")\n    .filter((pl.col(\"parent_company\")!=\"Grand Total\"),\n            (pl.col(\"parent_company\").is_not_null()))\n    .group_by(\"country\", \"year\")\n    .agg(pl.exclude(\"country\", \"year\", \"parent_company\").drop_nulls().sum())\n    )\n```\n:::\n\n\n::: {#6d22bad5 .cell execution_count=6}\n``` {.python .cell-code}\n# LEFT AS AN EXERCISE FOR THE USER\n# fill the missing values in the parent_company column with the phrase \"Grand Total\". \n# Since the parent company column is no longer informative, we can drop it.\nplastics_totals_1 = (plastics_df\n    .drop(\"grand_total\", \"num_events\", \"volunteers\")\n    .with_columns(pl.col(\"parent_company\").fill_null(\"Grand Total\"))\n    .filter(pl.col(\"parent_company\")==\"Grand Total\")\n    .drop(\"parent_company\")\n    )\n# What did we miss?\n(plastics_totals_1\n    .join(plastics_totals, on=[\"country\", \"year\"], how=\"anti\")\n    )\n\n(plastics_totals\n    .join(plastics_totals_1, on=[\"country\", \"year\"], how=\"anti\")\n    )\n\n# does not have row for the total\ntmp1_df = (plastics_df\n    .filter(pl.col(\"country\")==\"Slovenia\",\n            pl.col(\"year\")==2020)\n    )\n\n# does not have any records other than the total\ntmp2_df = (plastics_df\n    .filter(pl.col(\"country\")==\"United Arab Emirates\",\n            pl.col(\"year\")==2020)\n    )\n\ntmp2_df = (plastics_totals\n    .filter(pl.col(\"country\").is_null())\n    )\n```\n:::\n\n\nWe do have `grand_total` column which seems to be a sum of columns `empty:pvc` describing counts for different type of plastic. Let's say our goal is to make a chart describing the composition of trash by plastic type in different countries. In order to calculate proportions as we did previously, we need to have multiple observations for each country, one for each plastic type. Then we will calculate proportion over the country (and year).\n\n::: {#930781c3 .cell execution_count=7}\n``` {.python .cell-code}\nplastics_long_df = (plastics_df\n    .drop(\"grand_total\", \"num_events\", \"volunteers\")\n    .with_columns(pl.col(\"parent_company\").fill_null(\"Grand Total\"))\n    .filter(pl.col(\"parent_company\")==\"Grand Total\")\n    .drop(\"parent_company\")\n    #.unpivot(index=[\"country\", \"year\"], variable_name=\"plastic_type\", value_name=\"quantity\")\n    .unpivot(index=cs.by_name(\"country\", \"year\"), variable_name=\"plastic_type\", value_name=\"quantity\")\n    .with_columns(pl.col(\"quantity\").fill_null(0))\n    )\n# In `.unpivot()` the `on` argument is optional. Everything other than index\n```\n:::\n\n\nPivot is making the data wider\n\n::: {#96d9b7d3 .cell execution_count=8}\n``` {.python .cell-code}\n(plastics_long_df\n    .pivot(on=\"year\", values=\"quantity\")\n    )\n# In `.pivot()` the `index` is optional. All remaining columns not specified in `on` and `values` will be used.\n# either index or values need to be specified\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (650, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>country</th><th>plastic_type</th><th>2019</th><th>2020</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Argentina&quot;</td><td>&quot;region&quot;</td><td>&quot;Americas&quot;</td><td>&quot;Americas&quot;</td></tr><tr><td>&quot;Australia&quot;</td><td>&quot;region&quot;</td><td>&quot;Western Pacific&quot;</td><td>&quot;Western Pacific&quot;</td></tr><tr><td>&quot;Bangladesh&quot;</td><td>&quot;region&quot;</td><td>&quot;South-East Asia&quot;</td><td>null</td></tr><tr><td>&quot;Benin&quot;</td><td>&quot;region&quot;</td><td>&quot;Africa&quot;</td><td>&quot;Africa&quot;</td></tr><tr><td>&quot;Bhutan&quot;</td><td>&quot;region&quot;</td><td>&quot;South-East Asia&quot;</td><td>null</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Peru&quot;</td><td>&quot;pvc&quot;</td><td>null</td><td>&quot;1&quot;</td></tr><tr><td>&quot;Romania&quot;</td><td>&quot;pvc&quot;</td><td>null</td><td>&quot;0&quot;</td></tr><tr><td>&quot;Serbia&quot;</td><td>&quot;pvc&quot;</td><td>null</td><td>&quot;0&quot;</td></tr><tr><td>&quot;Singapore&quot;</td><td>&quot;pvc&quot;</td><td>null</td><td>&quot;0&quot;</td></tr><tr><td>&quot;Togo&quot;</td><td>&quot;pvc&quot;</td><td>null</td><td>&quot;0&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#2c9f5207 .cell execution_count=9}\n``` {.python .cell-code}\n(plastics_long_df\n    .pivot(on=\"year\", index=\"country\", values=\"quantity\", aggregate_function='sum')\n    )\n\nplastics_campaigns_df = (plastics_long_df\n    .pivot(on=\"year\", index=[\"country\", \"plastic_type\"], values=\"quantity\")\n    .group_by(\"country\")\n    .agg(pl.all().exclude(\"country\", \"plastic_type\").fill_null(0).sum())\n)\n\n(plastics_campaigns_df    \n    .filter(pl.col(\"country\").is_in([\"Germany\", \"Netherlands\", \"Switzerland\", \"France\", \"Spain\", \"Italy\"]))\n    .pipe(GT)\n    .cols_label(\n        country=\"Country\")\n    .tab_spanner(\"Year\", columns=[\"2019\", \"2020\"])\n    .tab_header(\n        title = \"Break Free From Plastics campaigns\",\n        subtitle = \"Brand plastic counts in some European countries\")\n    .tab_source_note(\n        source_note=\"Source: BFFP data via TidyTuesday 2021-01-26\"\n    )\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div id=\"vpsfnpapah\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#vpsfnpapah table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#vpsfnpapah thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#vpsfnpapah p { margin: 0; padding: 0; }\n #vpsfnpapah .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #vpsfnpapah .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #vpsfnpapah .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #vpsfnpapah .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #vpsfnpapah .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #vpsfnpapah .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #vpsfnpapah .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #vpsfnpapah .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #vpsfnpapah .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #vpsfnpapah .gt_column_spanner_outer:first-child { padding-left: 0; }\n #vpsfnpapah .gt_column_spanner_outer:last-child { padding-right: 0; }\n #vpsfnpapah .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\n #vpsfnpapah .gt_spanner_row { border-bottom-style: hidden; }\n #vpsfnpapah .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\n #vpsfnpapah .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\n #vpsfnpapah .gt_from_md> :first-child { margin-top: 0; }\n #vpsfnpapah .gt_from_md> :last-child { margin-bottom: 0; }\n #vpsfnpapah .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\n #vpsfnpapah .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #vpsfnpapah .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #vpsfnpapah .gt_row_group_first td { border-top-width: 2px; }\n #vpsfnpapah .gt_row_group_first th { border-top-width: 2px; }\n #vpsfnpapah .gt_striped { background-color: rgba(128,128,128,0.05); }\n #vpsfnpapah .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #vpsfnpapah .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #vpsfnpapah .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #vpsfnpapah .gt_left { text-align: left; }\n #vpsfnpapah .gt_center { text-align: center; }\n #vpsfnpapah .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #vpsfnpapah .gt_font_normal { font-weight: normal; }\n #vpsfnpapah .gt_font_bold { font-weight: bold; }\n #vpsfnpapah .gt_font_italic { font-style: italic; }\n #vpsfnpapah .gt_super { font-size: 65%; }\n #vpsfnpapah .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #vpsfnpapah .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n  <tr class=\"gt_heading\">\n    <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\">Break Free From Plastics campaigns</td>\n  </tr>\n  <tr class=\"gt_heading\">\n    <td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\">Brand plastic counts in some European countries</td>\n  </tr>\n<tr class=\"gt_col_headings gt_spanner_row\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Country\">Country</th>\n  <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Year\">\n    <span class=\"gt_column_spanner\">Year</span>\n  </th>\n</tr>\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"2019\">2019</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"2020\">2020</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr>\n    <td class=\"gt_row gt_left\">Spain</td>\n    <td class=\"gt_row gt_left\">None</td>\n    <td class=\"gt_row gt_left\">None</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">Germany</td>\n    <td class=\"gt_row gt_left\">None</td>\n    <td class=\"gt_row gt_left\">None</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">Italy</td>\n    <td class=\"gt_row gt_left\">None</td>\n    <td class=\"gt_row gt_left\">None</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">France</td>\n    <td class=\"gt_row gt_left\">None</td>\n    <td class=\"gt_row gt_left\">None</td>\n  </tr>\n  <tr>\n    <td class=\"gt_row gt_left\">Switzerland</td>\n    <td class=\"gt_row gt_left\">None</td>\n    <td class=\"gt_row gt_left\">None</td>\n  </tr>\n</tbody>\n  <tfoot class=\"gt_sourcenotes\">\n  \n  <tr>\n    <td class=\"gt_sourcenote\" colspan=\"3\">Source: BFFP data via TidyTuesday 2021-01-26</td>\n  </tr>\n\n</tfoot>\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n# joins\n\n::: {#f6881e2d .cell execution_count=10}\n``` {.python .cell-code}\nband_members = pl.DataFrame({\n    \"name\": [\"Mick\", \"John\", \"Paul\"],\n    \"band\": [\"Stones\", \"Beatles\", \"Beatles\"] \n    })\n\nband_instruments = pl.DataFrame({\n    \"name\": [\"John\", \"Paul\", \"Keith\", \"Ringo\"],\n    \"plays\": [\"guitar\", \"bass\", \"guitar\", \"drums\"]\n    })\n```\n:::\n\n\nLeft join\n\n::: {#0bae51f1 .cell execution_count=11}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"left\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th><th>plays</th></tr><tr><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Mick&quot;</td><td>&quot;Stones&quot;</td><td>null</td></tr><tr><td>&quot;John&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;bass&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nFull join\n\n::: {#35070bef .cell execution_count=12}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"full\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th><th>name_right</th><th>plays</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;John&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;John&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;Paul&quot;</td><td>&quot;bass&quot;</td></tr><tr><td>null</td><td>null</td><td>&quot;Keith&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>null</td><td>null</td><td>&quot;Ringo&quot;</td><td>&quot;drums&quot;</td></tr><tr><td>&quot;Mick&quot;</td><td>&quot;Stones&quot;</td><td>null</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#4a92a33a .cell execution_count=13}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"full\", coalesce=True))\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th><th>plays</th></tr><tr><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;John&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;bass&quot;</td></tr><tr><td>&quot;Keith&quot;</td><td>null</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Ringo&quot;</td><td>null</td><td>&quot;drums&quot;</td></tr><tr><td>&quot;Mick&quot;</td><td>&quot;Stones&quot;</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nInner join (Default)\n\n::: {#5df8de08 .cell execution_count=14}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"inner\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th><th>plays</th></tr><tr><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;John&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;Beatles&quot;</td><td>&quot;bass&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAnti join\n\n::: {#0785cca2 .cell execution_count=15}\n``` {.python .cell-code}\n(band_members\n.join(band_instruments, on=\"name\", how=\"anti\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>band</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Mick&quot;</td><td>&quot;Stones&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAnd reverse. Note the swapped order of datasets.\n\n::: {#b74eb1c0 .cell execution_count=16}\n``` {.python .cell-code}\n(band_instruments\n.join(band_members, on=\"name\", how=\"anti\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>plays</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Keith&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Ringo&quot;</td><td>&quot;drums&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nMost commonly used join is `left`. If you dont know which join you need, you need \"left\" join. Pay attention which dataset is on your left.\n\nFor the curious right join allows you to perform left join in the opposite direction (without swapping the datasets). You should do \"right join\" only as the last resort, when you can not change the dataset order.\n\nFull join introduces missing value, inner join drops records, left join does both, but thats what you probably want. Anti-join is useful for checking which records will get dropped if you perform an inner join. Do it in both directions!\n\nThere's something that's called \"semi-join\" but it is more like a filter. It will return the left dataset WITHOUT any additional information, filtered to only those records you have on the right.\n\n::: {#da389b29 .cell execution_count=17}\n``` {.python .cell-code}\n(band_instruments\n.join(band_members, on=\"name\", how=\"semi\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>plays</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;John&quot;</td><td>&quot;guitar&quot;</td></tr><tr><td>&quot;Paul&quot;</td><td>&quot;bass&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nLet's look at the data.\n\n::: {#2e8c6178 .cell execution_count=18}\n``` {.python .cell-code}\nfact_area_df = pl.read_csv(\"cia/factbook_area_2024.csv\", null_values=\"NA\")\nfact_comm_df = pl.read_csv(\"cia/factbook_comm_transport_2024.csv\", null_values=\"NA\")\nfact_econ_df = pl.read_csv(\"cia/factbook_economy_security_2024.csv\", null_values=\"NA\")\nfact_energy_df = pl.read_csv(\"cia/factbook_energy_environment_2024.csv\", null_values=\"NA\")\nfact_ppl_df = pl.read_csv(\"cia/factbook_people_society_2024.csv\", null_values=\"NA\")\n```\n:::\n\n\n::: {#d022f920 .cell execution_count=19}\n``` {.python .cell-code}\nprint(\"People dataset dimensions:\", fact_ppl_df.shape[0])\nprint(\"Energy dataset dimensions:\", fact_energy_df.shape[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPeople dataset dimensions: 237\nEnergy dataset dimensions: 226\n```\n:::\n:::\n\n\n# left join\n\nHow many records will be returned if we perform left join on this? Correct answer is 237. Creates missing values.\n\n::: {#cee6a130 .cell execution_count=20}\n``` {.python .cell-code}\n(\nfact_ppl_df\n    .join(fact_energy_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (237, 23)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>slug</th><th>region</th><th>alcohol_consumption_per_capita</th><th>birth_rate</th><th>children_under_the_age_of_5_years_underweight</th><th>death_rate</th><th>education_expenditures</th><th>infant_mortality_rate</th><th>life_expectancy_at_birth</th><th>maternal_mortality_ratio</th><th>median_age</th><th>net_migration_rate</th><th>obesity_adult_prevalence_rate</th><th>population_total</th><th>population_growth_rate</th><th>tobacco_use</th><th>total_fertility_rate</th><th>carbon_dioxide_emissions</th><th>electricity_installed_generating_capacity</th><th>energy_consumption_per_capita</th><th>revenue_from_coal</th><th>revenue_from_forest_resources</th></tr><tr><td>str</td><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Cook Islands&quot;</td><td>&quot;cook-islands&quot;</td><td>&quot;Australia and Oceania&quot;</td><td>12.97</td><td>12.1</td><td>null</td><td>9.4</td><td>4.6</td><td>15.1</td><td>77.6</td><td>null</td><td>41.1</td><td>-25.1</td><td>55.9</td><td>7761</td><td>-2.24</td><td>24.0</td><td>2.02</td><td>87000</td><td>17000</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Latvia&quot;</td><td>&quot;latvia&quot;</td><td>&quot;Europe&quot;</td><td>12.9</td><td>8.3</td><td>21.1</td><td>14.7</td><td>6.0</td><td>4.7</td><td>76.4</td><td>18</td><td>45.5</td><td>-4.9</td><td>23.6</td><td>1801246</td><td>-1.14</td><td>37.0</td><td>1.55</td><td>6458000</td><td>3233000</td><td>64272000</td><td>0.0</td><td>0.85</td></tr><tr><td>&quot;Czechia&quot;</td><td>&quot;czechia&quot;</td><td>&quot;Europe&quot;</td><td>12.73</td><td>9.8</td><td>null</td><td>12.0</td><td>5.1</td><td>2.6</td><td>78.6</td><td>3</td><td>44.2</td><td>2.7</td><td>26.0</td><td>10837890</td><td>0.04</td><td>30.7</td><td>1.73</td><td>91213000</td><td>21914000</td><td>149874000</td><td>0.14</td><td>0.17</td></tr><tr><td>&quot;Lithuania&quot;</td><td>&quot;lithuania&quot;</td><td>&quot;Europe&quot;</td><td>11.93</td><td>8.9</td><td>2.5</td><td>15.2</td><td>4.0</td><td>3.6</td><td>76.1</td><td>9</td><td>45.1</td><td>-4.1</td><td>26.3</td><td>2628186</td><td>-1.05</td><td>32.0</td><td>1.62</td><td>12803000</td><td>4258000</td><td>85201000</td><td>0.0</td><td>0.31</td></tr><tr><td>&quot;Austria&quot;</td><td>&quot;austria&quot;</td><td>&quot;Europe&quot;</td><td>11.9</td><td>9.3</td><td>null</td><td>9.9</td><td>5.1</td><td>3.2</td><td>82.7</td><td>5</td><td>44.9</td><td>3.5</td><td>20.1</td><td>8967982</td><td>0.3</td><td>26.4</td><td>1.52</td><td>57876000</td><td>29810000</td><td>123110000</td><td>0.0</td><td>0.07</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Tokelau&quot;</td><td>&quot;tokelau&quot;</td><td>&quot;Australia and Oceania&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>-3.84</td><td>null</td><td>1647</td><td>-0.01</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Svalbard&quot;</td><td>&quot;svalbard&quot;</td><td>&quot;Europe&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>-5.57</td><td>null</td><td>2926</td><td>-0.03</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Norfolk Island&quot;</td><td>&quot;norfolk-island&quot;</td><td>&quot;Australia and Oceania&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1748</td><td>0.01</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Holy See (Vatican City)&quot;</td><td>&quot;holy-see-vatican-city&quot;</td><td>&quot;Europe&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>1000</td><td>0.0</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Pitcairn Islands&quot;</td><td>&quot;pitcairn-islands&quot;</td><td>&quot;Australia and Oceania&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>50</td><td>0.0</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThe inner join drops \"unmatched\" observations from both sides\n\n::: {#985355c5 .cell execution_count=21}\n``` {.python .cell-code}\n(\n    fact_ppl_df\n    .join(fact_energy_df, on=[\"name\", \"slug\", \"region\"], how=\"inner\")\n    .shape\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n(223, 23)\n```\n:::\n:::\n\n\nFull join will keep unmatched observations on both sides.\n\n::: {#ae3e7098 .cell execution_count=22}\n``` {.python .cell-code}\n(\n    fact_ppl_df\n    .join(fact_energy_df, on=[\"name\", \"slug\", \"region\"], how=\"full\", coalesce=True)\n    .shape\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n(240, 23)\n```\n:::\n:::\n\n\nJoin all of these datasets.\n\n::: {#49f7b0a1 .cell execution_count=23}\n``` {.python .cell-code}\nfact_all_df = (\n    fact_area_df\n    .join(fact_econ_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n    .join(fact_energy_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n    .join(fact_comm_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n    .join(fact_ppl_df, on=[\"name\", \"slug\", \"region\"], how=\"left\")\n)\n```\n:::\n\n\n::: {#46c6f829 .cell execution_count=24}\n``` {.python .cell-code}\n(\n    ggplot(fact_all_df)+\n    geom_point(mapping=aes(x=\"gdp_composition_by_sector_of_origin_services\", y=\"energy_consumption_per_capita\", color=\"region\", size=\"population_total\"))+\n    scale_y_log10()+\n    scale_size_continuous()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">    137</span> \n<span class=\"ansi-green-fg ansi-bold\">    138</span>         This method will always be called when a ggplot object <span class=\"ansi-green-fg\">is</span> the\n<span class=\"ansi-green-fg ansi-bold\">    139</span>         last <span class=\"ansi-green-fg\">in</span> the cell<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-fg ansi-bold\">    140</span>         \"\"\"\n<span class=\"ansi-green-fg\">--&gt; 141</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_display<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">    177</span>             save_format <span class=\"ansi-blue-fg\">=</span> <span class=\"ansi-blue-fg\">\"png\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    178</span> \n<span class=\"ansi-green-fg ansi-bold\">    179</span>         figure_size_px <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>theme<span class=\"ansi-blue-fg\">.</span>_figure_size_px\n<span class=\"ansi-green-fg ansi-bold\">    180</span>         buf <span class=\"ansi-blue-fg\">=</span> BytesIO<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 181</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>buf<span class=\"ansi-blue-fg\">,</span> format<span class=\"ansi-blue-fg\">=</span>save_format<span class=\"ansi-blue-fg\">,</span> verbose<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">False</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    182</span>         display_func <span class=\"ansi-blue-fg\">=</span> get_display_function<span class=\"ansi-blue-fg\">(</span>format<span class=\"ansi-blue-fg\">,</span> figure_size_px<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    183</span>         display_func<span class=\"ansi-blue-fg\">(</span>buf<span class=\"ansi-blue-fg\">.</span>getvalue<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, filename, format, path, width, height, units, dpi, limitsize, verbose, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    669</span>             If<span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-green-fg\">True</span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-blue-fg\">,</span> print the saving information<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-fg ansi-bold\">    670</span>         kwargs <span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    671</span>             Additional arguments to <span class=\"ansi-green-fg\">pass</span> to matplotlib<span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span>savefig<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-fg ansi-bold\">    672</span>         \"\"\"\n<span class=\"ansi-green-fg\">--&gt; 673</span><span class=\"ansi-red-fg\">         sv = self.save_helper(\n</span><span class=\"ansi-green-fg ansi-bold\">    674</span>             filename<span class=\"ansi-blue-fg\">=</span>filename<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    675</span>             format<span class=\"ansi-blue-fg\">=</span>format<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    676</span>             path<span class=\"ansi-blue-fg\">=</span>path<span class=\"ansi-blue-fg\">,</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, filename, format, path, width, height, units, dpi, limitsize, verbose, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    617</span> \n<span class=\"ansi-green-fg ansi-bold\">    618</span>         <span class=\"ansi-green-fg\">if</span> dpi <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    619</span>             self<span class=\"ansi-blue-fg\">.</span>theme <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>theme <span class=\"ansi-blue-fg\">+</span> theme<span class=\"ansi-blue-fg\">(</span>dpi<span class=\"ansi-blue-fg\">=</span>dpi<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    620</span> \n<span class=\"ansi-green-fg\">--&gt; 621</span><span class=\"ansi-red-fg\">         </span>figure <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>draw<span class=\"ansi-blue-fg\">(</span>show<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">False</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    622</span>         <span class=\"ansi-green-fg\">return</span> mpl_save_view<span class=\"ansi-blue-fg\">(</span>figure<span class=\"ansi-blue-fg\">,</span> fig_kwargs<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, show)</span>\n<span class=\"ansi-green-fg ansi-bold\">    274</span>         <span class=\"ansi-red-fg\"># ggplot object. Do the copy here as we may/may not</span>\n<span class=\"ansi-green-fg ansi-bold\">    275</span>         <span class=\"ansi-red-fg\"># assign a default theme</span>\n<span class=\"ansi-green-fg ansi-bold\">    276</span>         self <span class=\"ansi-blue-fg\">=</span> deepcopy<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    277</span>         <span class=\"ansi-green-fg\">with</span> plot_context<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> show<span class=\"ansi-blue-fg\">=</span>show<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 278</span><span class=\"ansi-red-fg\">             </span>self<span class=\"ansi-blue-fg\">.</span>_build<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    279</span> \n<span class=\"ansi-green-fg ansi-bold\">    280</span>             <span class=\"ansi-red-fg\"># setup</span>\n<span class=\"ansi-green-fg ansi-bold\">    281</span>             self<span class=\"ansi-blue-fg\">.</span>figure<span class=\"ansi-blue-fg\">,</span> self<span class=\"ansi-blue-fg\">.</span>axs <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>facet<span class=\"ansi-blue-fg\">.</span>setup<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">    356</span>         layers<span class=\"ansi-blue-fg\">.</span>update_labels<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    357</span> \n<span class=\"ansi-green-fg ansi-bold\">    358</span>         <span class=\"ansi-red-fg\"># Give each layer a copy of the data, the mappings and</span>\n<span class=\"ansi-green-fg ansi-bold\">    359</span>         <span class=\"ansi-red-fg\"># the execution environment</span>\n<span class=\"ansi-green-fg\">--&gt; 360</span><span class=\"ansi-red-fg\">         </span>layers<span class=\"ansi-blue-fg\">.</span>setup<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    361</span> \n<span class=\"ansi-green-fg ansi-bold\">    362</span>         <span class=\"ansi-red-fg\"># Initialise panels, add extra data for margins &amp; missing</span>\n<span class=\"ansi-green-fg ansi-bold\">    363</span>         <span class=\"ansi-red-fg\"># facetting variables, and add on a PANEL variable to data</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/layer.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, plot)</span>\n<span class=\"ansi-green-fg ansi-bold\">    441</span>     <span class=\"ansi-green-fg\">def</span> setup<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> plot<span class=\"ansi-blue-fg\">:</span> ggplot<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    442</span>         <span class=\"ansi-green-fg\">for</span> l <span class=\"ansi-green-fg\">in</span> self<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 443</span><span class=\"ansi-red-fg\">             </span>l<span class=\"ansi-blue-fg\">.</span>setup<span class=\"ansi-blue-fg\">(</span>plot<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/layer.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, plot)</span>\n<span class=\"ansi-green-fg ansi-bold\">    159</span>         Prepare layer <span class=\"ansi-green-fg\">for</span> the plot building\n<span class=\"ansi-green-fg ansi-bold\">    160</span> \n<span class=\"ansi-green-fg ansi-bold\">    161</span>         Give the layer access to the data<span class=\"ansi-blue-fg\">,</span> mapping <span class=\"ansi-green-fg\">and</span> environment\n<span class=\"ansi-green-fg ansi-bold\">    162</span>         \"\"\"\n<span class=\"ansi-green-fg\">--&gt; 163</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_make_layer_data<span class=\"ansi-blue-fg\">(</span>plot<span class=\"ansi-blue-fg\">.</span>data<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    164</span>         self<span class=\"ansi-blue-fg\">.</span>_make_layer_mapping<span class=\"ansi-blue-fg\">(</span>plot<span class=\"ansi-blue-fg\">.</span>mapping<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    165</span>         self<span class=\"ansi-blue-fg\">.</span>_make_layer_environments<span class=\"ansi-blue-fg\">(</span>plot<span class=\"ansi-blue-fg\">.</span>environment<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/layer.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, plot_data)</span>\n<span class=\"ansi-green-fg ansi-bold\">    175</span>         \"\"\"\n<span class=\"ansi-green-fg ansi-bold\">    176</span>         <span class=\"ansi-green-fg\">if</span> plot_data <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    177</span>             data <span class=\"ansi-blue-fg\">=</span> pd<span class=\"ansi-blue-fg\">.</span>DataFrame<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    178</span>         <span class=\"ansi-green-fg\">elif</span> hasattr<span class=\"ansi-blue-fg\">(</span>plot_data<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">\"to_pandas\"</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 179</span><span class=\"ansi-red-fg\">             </span>data <span class=\"ansi-blue-fg\">=</span> cast<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">\"DataFrameConvertible\"</span><span class=\"ansi-blue-fg\">,</span> plot_data<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>to_pandas<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    180</span>         <span class=\"ansi-green-fg\">else</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span>             data <span class=\"ansi-blue-fg\">=</span> cast<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">\"pd.DataFrame\"</span><span class=\"ansi-blue-fg\">,</span> plot_data<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    182</span> \n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/polars/dataframe/frame.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, use_pyarrow_extension_array, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2408</span>             return self._to_pandas_with_object_columns(\n<span class=\"ansi-green-fg ansi-bold\">   2409</span>                 use_pyarrow_extension_array<span class=\"ansi-blue-fg\">=</span>use_pyarrow_extension_array<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs\n<span class=\"ansi-green-fg ansi-bold\">   2410</span>             )\n<span class=\"ansi-green-fg ansi-bold\">   2411</span> \n<span class=\"ansi-green-fg\">-&gt; 2412</span><span class=\"ansi-red-fg\">         return self._to_pandas_without_object_columns(\n</span><span class=\"ansi-green-fg ansi-bold\">   2413</span>             self<span class=\"ansi-blue-fg\">,</span> use_pyarrow_extension_array<span class=\"ansi-blue-fg\">=</span>use_pyarrow_extension_array<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs\n<span class=\"ansi-green-fg ansi-bold\">   2414</span>         )\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/polars/dataframe/frame.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, df, use_pyarrow_extension_array, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2459</span>     ) -&gt; pd.DataFrame:\n<span class=\"ansi-green-fg ansi-bold\">   2460</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> df<span class=\"ansi-blue-fg\">.</span>width<span class=\"ansi-blue-fg\">:</span>  <span class=\"ansi-red-fg\"># Empty dataframe, cannot infer schema from batches</span>\n<span class=\"ansi-green-fg ansi-bold\">   2461</span>             <span class=\"ansi-green-fg\">return</span> pd<span class=\"ansi-blue-fg\">.</span>DataFrame<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2462</span> \n<span class=\"ansi-green-fg\">-&gt; 2463</span><span class=\"ansi-red-fg\">         </span>record_batches <span class=\"ansi-blue-fg\">=</span> df<span class=\"ansi-blue-fg\">.</span>_df<span class=\"ansi-blue-fg\">.</span>to_pandas<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2464</span>         tbl <span class=\"ansi-blue-fg\">=</span> pa<span class=\"ansi-blue-fg\">.</span>Table<span class=\"ansi-blue-fg\">.</span>from_batches<span class=\"ansi-blue-fg\">(</span>record_batches<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2465</span>         <span class=\"ansi-green-fg\">if</span> use_pyarrow_extension_array<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">   2466</span>             return tbl.to_pandas(\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'pyarrow'</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n<plotnine.ggplot.ggplot at 0x79c510947c40>\n```\n:::\n:::\n\n\n::: {#d25a9116 .cell execution_count=25}\n``` {.python .cell-code}\n(\n    ggplot(fact_all_df)+\n    geom_point(mapping=aes(x=\"military_expenditures\", y=\"total_fertility_rate\", color=\"region\", size=\"population_total\"))+\n    scale_y_log10()\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>                       Traceback (most recent call last)\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">    137</span> \n<span class=\"ansi-green-fg ansi-bold\">    138</span>         This method will always be called when a ggplot object <span class=\"ansi-green-fg\">is</span> the\n<span class=\"ansi-green-fg ansi-bold\">    139</span>         last <span class=\"ansi-green-fg\">in</span> the cell<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-fg ansi-bold\">    140</span>         \"\"\"\n<span class=\"ansi-green-fg\">--&gt; 141</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_display<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">    177</span>             save_format <span class=\"ansi-blue-fg\">=</span> <span class=\"ansi-blue-fg\">\"png\"</span>\n<span class=\"ansi-green-fg ansi-bold\">    178</span> \n<span class=\"ansi-green-fg ansi-bold\">    179</span>         figure_size_px <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>theme<span class=\"ansi-blue-fg\">.</span>_figure_size_px\n<span class=\"ansi-green-fg ansi-bold\">    180</span>         buf <span class=\"ansi-blue-fg\">=</span> BytesIO<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">--&gt; 181</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>save<span class=\"ansi-blue-fg\">(</span>buf<span class=\"ansi-blue-fg\">,</span> format<span class=\"ansi-blue-fg\">=</span>save_format<span class=\"ansi-blue-fg\">,</span> verbose<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">False</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    182</span>         display_func <span class=\"ansi-blue-fg\">=</span> get_display_function<span class=\"ansi-blue-fg\">(</span>format<span class=\"ansi-blue-fg\">,</span> figure_size_px<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    183</span>         display_func<span class=\"ansi-blue-fg\">(</span>buf<span class=\"ansi-blue-fg\">.</span>getvalue<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, filename, format, path, width, height, units, dpi, limitsize, verbose, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    669</span>             If<span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-green-fg\">True</span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-blue-fg\">,</span> print the saving information<span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-fg ansi-bold\">    670</span>         kwargs <span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    671</span>             Additional arguments to <span class=\"ansi-green-fg\">pass</span> to matplotlib<span class=\"ansi-red-fg\"> </span><span class=\"ansi-red-fg\">`</span>savefig<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-red-fg\">`</span><span class=\"ansi-blue-fg\">.</span>\n<span class=\"ansi-green-fg ansi-bold\">    672</span>         \"\"\"\n<span class=\"ansi-green-fg\">--&gt; 673</span><span class=\"ansi-red-fg\">         sv = self.save_helper(\n</span><span class=\"ansi-green-fg ansi-bold\">    674</span>             filename<span class=\"ansi-blue-fg\">=</span>filename<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    675</span>             format<span class=\"ansi-blue-fg\">=</span>format<span class=\"ansi-blue-fg\">,</span>\n<span class=\"ansi-green-fg ansi-bold\">    676</span>             path<span class=\"ansi-blue-fg\">=</span>path<span class=\"ansi-blue-fg\">,</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, filename, format, path, width, height, units, dpi, limitsize, verbose, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">    617</span> \n<span class=\"ansi-green-fg ansi-bold\">    618</span>         <span class=\"ansi-green-fg\">if</span> dpi <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">not</span> <span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    619</span>             self<span class=\"ansi-blue-fg\">.</span>theme <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>theme <span class=\"ansi-blue-fg\">+</span> theme<span class=\"ansi-blue-fg\">(</span>dpi<span class=\"ansi-blue-fg\">=</span>dpi<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    620</span> \n<span class=\"ansi-green-fg\">--&gt; 621</span><span class=\"ansi-red-fg\">         </span>figure <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>draw<span class=\"ansi-blue-fg\">(</span>show<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-green-fg\">False</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    622</span>         <span class=\"ansi-green-fg\">return</span> mpl_save_view<span class=\"ansi-blue-fg\">(</span>figure<span class=\"ansi-blue-fg\">,</span> fig_kwargs<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, show)</span>\n<span class=\"ansi-green-fg ansi-bold\">    274</span>         <span class=\"ansi-red-fg\"># ggplot object. Do the copy here as we may/may not</span>\n<span class=\"ansi-green-fg ansi-bold\">    275</span>         <span class=\"ansi-red-fg\"># assign a default theme</span>\n<span class=\"ansi-green-fg ansi-bold\">    276</span>         self <span class=\"ansi-blue-fg\">=</span> deepcopy<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    277</span>         <span class=\"ansi-green-fg\">with</span> plot_context<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> show<span class=\"ansi-blue-fg\">=</span>show<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 278</span><span class=\"ansi-red-fg\">             </span>self<span class=\"ansi-blue-fg\">.</span>_build<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    279</span> \n<span class=\"ansi-green-fg ansi-bold\">    280</span>             <span class=\"ansi-red-fg\"># setup</span>\n<span class=\"ansi-green-fg ansi-bold\">    281</span>             self<span class=\"ansi-blue-fg\">.</span>figure<span class=\"ansi-blue-fg\">,</span> self<span class=\"ansi-blue-fg\">.</span>axs <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>facet<span class=\"ansi-blue-fg\">.</span>setup<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/ggplot.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg ansi-bold\">    356</span>         layers<span class=\"ansi-blue-fg\">.</span>update_labels<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    357</span> \n<span class=\"ansi-green-fg ansi-bold\">    358</span>         <span class=\"ansi-red-fg\"># Give each layer a copy of the data, the mappings and</span>\n<span class=\"ansi-green-fg ansi-bold\">    359</span>         <span class=\"ansi-red-fg\"># the execution environment</span>\n<span class=\"ansi-green-fg\">--&gt; 360</span><span class=\"ansi-red-fg\">         </span>layers<span class=\"ansi-blue-fg\">.</span>setup<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    361</span> \n<span class=\"ansi-green-fg ansi-bold\">    362</span>         <span class=\"ansi-red-fg\"># Initialise panels, add extra data for margins &amp; missing</span>\n<span class=\"ansi-green-fg ansi-bold\">    363</span>         <span class=\"ansi-red-fg\"># facetting variables, and add on a PANEL variable to data</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/layer.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, plot)</span>\n<span class=\"ansi-green-fg ansi-bold\">    441</span>     <span class=\"ansi-green-fg\">def</span> setup<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">,</span> plot<span class=\"ansi-blue-fg\">:</span> ggplot<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    442</span>         <span class=\"ansi-green-fg\">for</span> l <span class=\"ansi-green-fg\">in</span> self<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 443</span><span class=\"ansi-red-fg\">             </span>l<span class=\"ansi-blue-fg\">.</span>setup<span class=\"ansi-blue-fg\">(</span>plot<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/layer.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, plot)</span>\n<span class=\"ansi-green-fg ansi-bold\">    159</span>         Prepare layer <span class=\"ansi-green-fg\">for</span> the plot building\n<span class=\"ansi-green-fg ansi-bold\">    160</span> \n<span class=\"ansi-green-fg ansi-bold\">    161</span>         Give the layer access to the data<span class=\"ansi-blue-fg\">,</span> mapping <span class=\"ansi-green-fg\">and</span> environment\n<span class=\"ansi-green-fg ansi-bold\">    162</span>         \"\"\"\n<span class=\"ansi-green-fg\">--&gt; 163</span><span class=\"ansi-red-fg\">         </span>self<span class=\"ansi-blue-fg\">.</span>_make_layer_data<span class=\"ansi-blue-fg\">(</span>plot<span class=\"ansi-blue-fg\">.</span>data<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    164</span>         self<span class=\"ansi-blue-fg\">.</span>_make_layer_mapping<span class=\"ansi-blue-fg\">(</span>plot<span class=\"ansi-blue-fg\">.</span>mapping<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    165</span>         self<span class=\"ansi-blue-fg\">.</span>_make_layer_environments<span class=\"ansi-blue-fg\">(</span>plot<span class=\"ansi-blue-fg\">.</span>environment<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/plotnine/layer.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, plot_data)</span>\n<span class=\"ansi-green-fg ansi-bold\">    175</span>         \"\"\"\n<span class=\"ansi-green-fg ansi-bold\">    176</span>         <span class=\"ansi-green-fg\">if</span> plot_data <span class=\"ansi-green-fg\">is</span> <span class=\"ansi-green-fg\">None</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    177</span>             data <span class=\"ansi-blue-fg\">=</span> pd<span class=\"ansi-blue-fg\">.</span>DataFrame<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    178</span>         <span class=\"ansi-green-fg\">elif</span> hasattr<span class=\"ansi-blue-fg\">(</span>plot_data<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">\"to_pandas\"</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 179</span><span class=\"ansi-red-fg\">             </span>data <span class=\"ansi-blue-fg\">=</span> cast<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">\"DataFrameConvertible\"</span><span class=\"ansi-blue-fg\">,</span> plot_data<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>to_pandas<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    180</span>         <span class=\"ansi-green-fg\">else</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">    181</span>             data <span class=\"ansi-blue-fg\">=</span> cast<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">\"pd.DataFrame\"</span><span class=\"ansi-blue-fg\">,</span> plot_data<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">    182</span> \n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/polars/dataframe/frame.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, use_pyarrow_extension_array, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2408</span>             return self._to_pandas_with_object_columns(\n<span class=\"ansi-green-fg ansi-bold\">   2409</span>                 use_pyarrow_extension_array<span class=\"ansi-blue-fg\">=</span>use_pyarrow_extension_array<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs\n<span class=\"ansi-green-fg ansi-bold\">   2410</span>             )\n<span class=\"ansi-green-fg ansi-bold\">   2411</span> \n<span class=\"ansi-green-fg\">-&gt; 2412</span><span class=\"ansi-red-fg\">         return self._to_pandas_without_object_columns(\n</span><span class=\"ansi-green-fg ansi-bold\">   2413</span>             self<span class=\"ansi-blue-fg\">,</span> use_pyarrow_extension_array<span class=\"ansi-blue-fg\">=</span>use_pyarrow_extension_array<span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">**</span>kwargs\n<span class=\"ansi-green-fg ansi-bold\">   2414</span>         )\n\n<span class=\"ansi-green-fg\">~/Projects/DATA24WEB/.venv/lib/python3.10/site-packages/polars/dataframe/frame.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self, df, use_pyarrow_extension_array, **kwargs)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2459</span>     ) -&gt; pd.DataFrame:\n<span class=\"ansi-green-fg ansi-bold\">   2460</span>         <span class=\"ansi-green-fg\">if</span> <span class=\"ansi-green-fg\">not</span> df<span class=\"ansi-blue-fg\">.</span>width<span class=\"ansi-blue-fg\">:</span>  <span class=\"ansi-red-fg\"># Empty dataframe, cannot infer schema from batches</span>\n<span class=\"ansi-green-fg ansi-bold\">   2461</span>             <span class=\"ansi-green-fg\">return</span> pd<span class=\"ansi-blue-fg\">.</span>DataFrame<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2462</span> \n<span class=\"ansi-green-fg\">-&gt; 2463</span><span class=\"ansi-red-fg\">         </span>record_batches <span class=\"ansi-blue-fg\">=</span> df<span class=\"ansi-blue-fg\">.</span>_df<span class=\"ansi-blue-fg\">.</span>to_pandas<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2464</span>         tbl <span class=\"ansi-blue-fg\">=</span> pa<span class=\"ansi-blue-fg\">.</span>Table<span class=\"ansi-blue-fg\">.</span>from_batches<span class=\"ansi-blue-fg\">(</span>record_batches<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg ansi-bold\">   2465</span>         <span class=\"ansi-green-fg\">if</span> use_pyarrow_extension_array<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg ansi-bold\">   2466</span>             return tbl.to_pandas(\n\n<span class=\"ansi-red-fg\">ModuleNotFoundError</span>: No module named 'pyarrow'</pre>\n```\n:::\n\n:::\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n<plotnine.ggplot.ggplot at 0x79c5109660b0>\n```\n:::\n:::\n\n\n## Stacking\n\n::: {#464a8985 .cell execution_count=26}\n``` {.python .cell-code}\n# indoor air pollution\nhhap_deaths = pl.read_csv(\"hhap/hhap_deaths.csv\")\nclean_fuels = pl.read_csv(\"hhap/clean_fuels_cooking.csv\")\nfuel_types = pl.read_csv(\"hhap/cooking_by_fuel_type.csv\")\n```\n:::\n\n\nAnother common type of operation is stacking two identical datasets together (vertically). This is possible to do when the meaning of the columns in the datasets is the same and we are interested in combining two parts of identical data into a new and larger dataset.\n\nRecall that in our household air pollution case study we had three files: \n- `hhap_deaths` - containing death cases, associated with air pollution\n- `fuel_types` - describing information about the fuels used by population in different countries for household needs \n- `clean_fuels` - containing the fraction of population in each country with access to clean fulels for cooking\n\nAll three of these datasets contain three identical columns describing the country of observation: `region`, `country_code` and `country`. The countries listed in each of the datasets is largely similar, but not completely overlapping. Let's see if we can compile a single master set of all countries with the codes and the regions they belong to. Because the data is recorded over many years each of the datasets contains many duplicates entries. This problem will be even larger when we stack the data from several datasets together, so we will need to ensure the records in our final (combined) dataset are unique.\n\n::: {#d58d708b .cell execution_count=27}\n``` {.python .cell-code}\nidcols=cs.by_name(\"region\", \"country_code\", \"country\")\ncountry_regions = (hhap_deaths.select(idcols)\n    .vstack(fuel_types.select(idcols))\n    .vstack(clean_fuels.select(idcols))\n    .unique()\n)\n```\n:::\n\n\nNote, that here we created a temporary object idcols, which will store only selector object for the three columns we are interested in. Polar selectors are independent entities which can live both inside the querying contexts as well as in the global environment, i.e. in memory accessible\n\nLets compare our country codes with the full list of codes issued by ISO. Here's a file with all Alpha 2 and Alpha 3 codes issued to nation states and territories.\n\n::: {#022de246 .cell execution_count=28}\n``` {.python .cell-code}\niso_df = pl.read_csv(\"hhap/CountryCodes_Alpha2_Alpha3.csv\")\n\n(country_regions\n    .join(iso_df, left_on=\"country_code\", right_on=\"alpha3\", how=\"anti\"))\n\n(country_regions\n    .join(iso_df, left_on=\"country_code\", right_on=\"alpha3\", how=\"left\"))\n\n# How many countries are not present in the combined household air pollution dataset? \n# What proportion of those countries have the world \"Island\" in their name?\n\ntmp_df1 = (iso_df\n    .join(country_regions, left_on=\"alpha3\", right_on=\"country_code\", how=\"anti\"))\n\n(iso_df\n    .join(country_regions, left_on=\"alpha3\", right_on=\"country_code\", how=\"anti\")\n    .select(pl.col(\"country\").str.contains(\"Island\").mean())\n    )\n\n(iso_df\n    .join(country_regions, left_on=\"alpha3\", right_on=\"country_code\", how=\"anti\")\n    .group_by(pl.col(\"country\").str.contains(\"Island\").alias(\"island\"))\n    .len()\n    .with_columns(pl.col(\"len\")/pl.sum(\"len\"))\n    .filter(\"island\")\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th><th>len</th></tr><tr><td>bool</td><td>f64</td></tr></thead><tbody><tr><td>true</td><td>0.259259</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nHorizontal stacking is possible, but you probably want to do a join instead, because horizontal stacking assumes that row order is the same and observations are identical. This is better ensured with unique IDs which could be used for join.\n\n",
    "supporting": [
      "pivotjoin_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}