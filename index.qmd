---
title: "Data Literacy with Python"
---

Welcome to Data Literacy with Python!

Let me ask you something: Can you imagine living in today’s world but being unable to read? Think about it—street signs wouldn’t make sense, advertisements would just be noise, and most of the internet? Completely out of reach.

Now, even with videos and voice assistants everywhere, written text is still the backbone of how we communicate and navigate life. Without it, you'd feel lost.

But here’s the thing: today’s world doesn’t just run on words. It runs on data.

Every day, we’re creating over 400 million terabytes of data. That’s every single day. And here’s a wild stat—90% of all the world’s data was created in just the last two years.

This explosion of information is transforming how we make decisions, whether it’s in business, science, or society as a whole. But here’s the catch: to keep up, you need to know how to make sense of it.

Data isn’t just numbers on a screen—it’s stories waiting to be uncovered. And understanding data has become just as important as being able to read or write.


That’s where this course comes in.

We’re going to teach you how to take raw, messy data and turn it into something meaningful. You’ll work with rectangular data—the kind you find in spreadsheets or databases.

And don’t worry—this isn’t just about working with numbers. It’s about answering real-world questions, solving problems, and making decisions based on insights you uncover.

By the end of this course, you’ll have the skills to transform data into knowledge.

Let’s talk about the tools you need to work with data.

You might be tempted by low-code or no-code solutions—those point-and-click interfaces that make everything seem so easy. And sure, they’re great for quick wins. But when it comes to serious data analysis, they have some big limitations.

Here’s the thing: data analysis isn’t just about getting answers—it’s about getting credible answers.

To trust your insights, you need to leave a trail. Think about it—during analysis, you make dozens of tiny decisions:

- Which part of the data should you focus on?
- What variables should you use?
- Which patterns caught your eye?

Every decision shapes your results. And if you—or anyone else—can’t retrace those steps, how can you be sure your conclusions hold up?

That’s why scripting your analysis is so important.

With a script, every step is recorded. You can spot mistakes, refine your work, or pick up right where you left off—even months later. Low-code tools? They don’t give you that kind of transparency.

So, what’s the best language for scripting your data analysis?

The answer is Python.

Python is the world’s most popular programming language, and for good reason. Created in 1990 by Guido van Rossum, Python has become the go-to language for everything from building websites to powering cutting-edge AI. It may not be the fastest language out there, but it’s arguably the most readable. And in today’s data-driven world, readability matters more than ever. 

The Python ecosystem for data analysis is enormous. Whatever your question, there’s a good chance Python has a library—or ten—that can help.

Data analysis is unique—it’s less about traditional programming and more about crafting a story with your data. Your code should be clear and intuitive, not just for you, but for anyone who needs to understand your work.

And that includes “future you”—because six months from now, you might not even recognize your own analysis without clear documentation!

So, as we dive into this course, we’ll emphasize simplicity, transparency, and readability. Because great analysis isn’t just about crunching numbers—it’s about telling a story that stands the test of time.

Data analysis is evolving.

Today, some of the most cutting-edge tools are built on high-performance programming languages like Rust, Java, or C++. Why? Because these languages are fast—lightning fast. But here’s the best part: you don’t need to write in these languages to enjoy their benefits.

Modern tools now separate the user interface from the engine. That means the algorithms working behind the scenes are the same, no matter which scripting language you use.

Initiatives like Apache Arrow go even further—they create standardized data formats, making it easy to move between tools and platforms without losing performance or compatibility.

In this course, we’re diving into tools built on Rust—one of the fastest, most efficient programming languages out there. Specifically, we’ll use uv for managing packages and environments and polars for data wrangling.

These tools are not just fast—they’re scalable.

The examples we’ll explore together are small—easy to follow and understand. But don’t let that fool you. The same tools we use here can scale effortlessly to handle datasets with billions of rows, processed across dozens of parallel machines.

What’s even better? The interface doesn’t change.

So whether you’re working on a personal project, academic research, or a large-scale business application, the skills you gain here will translate directly to the real world.

The datasets may be small, but the questions and challenges we tackle are universal. By the end of this course, you’ll be equipped to uncover meaningful insights from your own data, no matter its size or complexity.

Let’s get started on this exciting journey into the world of data literacy!


## Shell

Before we dive into the thrilling world of data analysis, let’s pause and talk about something fundamental: your computer. That’s right, the device you’re watching this on is more than just a tool—it’s the backbone of your data analysis journey. Set it up well, and it will help you create reliable, reproducible, and stunning analytic projects.

But to unlock its full potential, we need to talk about something that might not look exciting at first glance but is incredibly powerful: the command line—also known as the shell or terminal.

Every operating system has some version of a terminal. Whether you're on Windows, macOS, or Linux, this is your gateway to greater control over your computer. In the terminal, you don’t rely on menus, buttons, or icons. Instead, you type commands, giving you direct access to your system's capabilities.

Now, if this is new to you, don’t worry! Below this video, you’ll find instructions on how to locate and open the terminal on your operating system. Take a moment to familiarize yourself with launching it, and then meet me back here.

Once you’re ready, we’ll discuss folders—yes, the simple yet crucial task of organizing your files. If you already know how to navigate your operating system, create new folders, and understand the user directory, feel free to skip ahead to the next video. Otherwise, stick with me, and I’ll walk you through everything you need to know.

:::{.challenge}
Find and open the terminal on your computer. Take that first step toward becoming a power user!
:::

## On files and folders

Now that you’ve found your terminal, it’s time to talk about something fundamental to every data analysis project: files and folders.

Think about how your computer organizes everything you create or download—whether it’s a Word document, an Excel spreadsheet, or a photo. These files are stored in folders, and if you’ve ever saved something important, you know how critical it is to remember where it’s located.

When working with data analysis, you’ll generate a lot of files—scripts, datasets, reports, visualizations—the list goes on. Keeping all of these files organized and in one place is essential to staying productive. You don’t want to waste time hunting through your computer every time you need something.

Here’s the good news: your operating system already provides a great tool for organizing files—folders. Folders are like containers, and they can even hold other folders. Picture this as a tree, with your main folder as the trunk and subfolders branching out.

Let’s take a moment to explore this on your computer.

- On Windows, you can open File Explorer by clicking the icon on your taskbar or pressing the Windows key + E. Once it’s open, you’ll see something like this:

![](img/win_explorer.png)

- On Mac, you’ll use an app called Finder. Just click its icon in the Dock, and you’ll see a view like this:

![](img/mac_finder.png)

- On Linux, it’s often just called Files, and the interface may vary depending on your distribution. On my Ubuntu setup, it looks like this:

![](img/linux-files.png)

Inside these interfaces, folders are easy to spot with their distinct icons. Click on one, and you’ll dive inside to see its contents—maybe more files, maybe more folders.

Now, every operating system has a home base for your personal files. This is typically called your Home folder and contains directories like Music, Pictures, Videos, and Downloads. A special folder called Desktop displays its contents right on your screen.

While it’s tempting to store everything on your Desktop for easy access, this isn’t the best long-term solution. A cluttered Desktop can make it harder to stay organized, and let’s be honest—it doesn’t look great either.

![](img/desktop.jpeg)

Instead, consider creating a dedicated folder for your data analysis projects. For example, you could use your Documents folder or create a new folder called Projects. If your Documents folder is synced to the cloud—like with OneDrive or iCloud—think carefully about whether that’s the right place for large datasets. Cloud storage is precious, and you might want to save that space for smaller files like presentations or text documents.

Don’t worry about backups just yet—we’ll cover that later when we dive into version control using Git and GitHub. For now, focus on picking a location that’s tidy, accessible, and works for you.

Once you’ve chosen your perfect home base, we’ll move on to the next step: learning how to navigate your files and folders using the command line. Trust me, it’s easier than it sounds, and it will make your workflow so much more efficient!


## Installing uv

:::{.callout-tip}
### Objective
Install uv.
:::

Wheres my terminal


We will install the main tool. Open the terminal and run

```
# On macOS and Linux.
$ curl -LsSf https://astral.sh/uv/install.sh | sh

# On Windows.
$ powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
```

Alternative attempts to deal with installation problems

If you have python and pip install using pip (you will never need it again)

```
# With pip.
$ pip install uv
```

On Mac it can be built with Homebrew

```
# using Homebrew on Mac
$ brew install uv
```

::: {.callout-note}
Before you proceed, please check that installation is successful by running `uv` in the terminal. You should see something like this

```
uv

#> An extremely fast Python package manager.
#>
#> Usage: uv [OPTIONS] <COMMAND>
#> 
#> Commands:
#>  run      Run a command or script
#>  init     Create a new project
#>  ...
```

:::

## Managing python installation

:::{.callout-tip}
### Objective
Install Python using uv
:::

`uv` is not only powerful package and environment manager, but it also can help manage Python installations. Run the following to see if `uv` can detect an existing Python installation in your system.

```
$ uv python find
#> /path/to/your/installation/of/bin/python3
```
If no path is returned you can easily install `uv`-managed latest version of Python with

```
$ uv python install
```


Navigating to project location using command line (ls, cd and cd ..).

## Projects

:::{.callout-tip}
### Objective
Create project. 
:::

Each of your data analysis endeavours should be stored in a separate project folder. 

```
$ uv init data-literacy-project
cd data-literacy-project
```

or alternatively

```
$ mkdir data-literacy-project
$ cd data-literacy-project
$ uv init
```

## Libraries

:::{.callout-tip}
### Objective
Add dependencies
:::

We will need a few libraries. Lets add them 

```
$ uv add gapminder plotnine polars jupyter great_tables setuptools ipykernel pyyaml nbformat nbclient
```
If you did these steps then you should have a file `data-literacy-project/pyproject.toml` which looks something like this

```yaml
[project]
name = "data-literacy-project"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "gapminder>=0.1",
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    "plotnine>=0.13.6",
    "polars>=1.8.2",
    "setuptools>=75.1.0",
]
```

## Activation

Finally we need to activate the environment we created

```
source .venv/bin/activate
```

